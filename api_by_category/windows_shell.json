[
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function supports these alternate path forms: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathAllocCanonicalize",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to a buffer that contains the original string. This value cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the building of \\\\?\\ paths longer than MAX_PATH.        PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_ENSURE_TRAILING_SLASH 0x00000020       When combining or normalizing a path, ensure there is a trailing backslash. Note  This value is available starting in Windows 10, version 1703."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszPathOut",
        "description": "The address of a pointer to a buffer that, when this function returns successfully, receives the canonicalized path string. It is the responsibility of the caller to free this resource, when it is no longer needed, by calling the LocalFree function. This value cannot be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including the following.  ",
    "remarks": "This function responds to the strings \".\" and \"..\" embedded in a path. The \"..\" string indicates to remove the immediately preceding path segment. The \".\" string indicates to skip over the next path segment. Note that the root segment of the path cannot be removed. If there are more \"..\" strings than there are path segments, the function returns S_OK and the buffer pointed to by pszPathOut contains a single backslash, \"\\\". All trailing periods are removed from the path, except when preceded by the \"*\" wild card character. In that case, a single period is retained after the '*' character, but all other trailing periods are removed. If the resulting path is a root drive (\"x:\"), a backslash is appended (\"x:\\\"). The following examples show the effect of these strings.  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCanonicalize",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the canonicalized path string."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the original path string. If this value points to an empty string, or results in an empty string once the \".\" and \"..\" elements are removed, a single backslash is copied to the buffer pointed to by pszPathOut."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including but not limited to the following.  ",
    "remarks": "This function responds to the strings \".\" and \"..\" embedded in a path. The \"..\" string indicates to remove the immediately preceding path segment. The \".\" string indicates to skip over the next path segment. Note that the root segment of the path cannot be removed. If there are more \"..\" strings than there are path segments, the function returns S_OK and the buffer pointed to by pszPathOut contains a single backslash, \"\\\". All trailing periods are removed from the path, except when preceded by the \"*\" wild card character. In that case, a single period is retained after the '*' character, but all other trailing periods are removed. If the resulting path is a root drive (\"x:\"), a backslash is appended (\"x:\\\"). The following examples show the effect of these strings.  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCanonicalizeEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the edited path string."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the original path string. If this value is NULL, points to an empty string, or results in an empty string once the \".\" and \"..\" elements are removed, a single backslash is copied to the buffer pointed to by pszPathOut."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the building of \\\\?\\ paths longer than MAX_PATH. Note that cchPathOut must be greater than MAX_PATH. If it is not, this flag is ignored.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_ENSURE_TRAILING_SLASH 0x00000020       When combining or normalizing a path, ensure there is a trailing backslash. Note  This value is available starting in Windows 10, version 1703."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Simplifies a path by removing navigation elements such as \".\" and \"..\" to produce a direct, well-formed path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if a result has been computed and the content of the lpszDst output buffer is valid. Returns FALSE otherwise, and the contents of the buffer pointed to by lpszDst are invalid. To get extended error information, call GetLastError. ",
    "remarks": "This function allows the user to specify what to remove from a path by inserting special character sequences into the path. The \"..\" sequence indicates to remove a path segment from the current position to the previous path segment. The \".\" sequence indicates to skip over the next path segment to the following path segment. The root segment of the path cannot be removed. If there are more \"..\" sequences than there are path segments, the function returns TRUE and contents of the buffer pointed to by lpszDst contains just the root, \"\\\".  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathCanonicalize",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszDst",
        "description": "Type: LPTSTR A pointer to a string that receives the canonicalized path. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszSrc",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be canonicalized."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "While either pszPathIn or pszMore can NULL, they cannot both be NULL. This function supports these alternate path forms: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathAllocCombine",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the first path string."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by pszPathIn. If this path is fully qualified, it is copied directly to the output buffer without being combined with the other path."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the construction of \\\\?\\ paths longer than MAX_PATH.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_ENSURE_TRAILING_SLASH 0x00000020       When combining or normalizing a path, ensure there is a trailing backslash. Note  This value is available starting in Windows 10, version 1703."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszPathOut",
        "description": "The address of a pointer to a buffer that, when this function returns successfully, receives the combined path string. It is the responsibility of the caller to free this resource, when it is no longer needed, by calling the LocalFree function. This value cannot be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns an HRESULT code, including the following.  ",
    "remarks": "If both pszPathIn and pszMore are NULL or point to empty strings, a single backslash is copied to the buffer pointed to by pszPathOut. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCombine",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as pszPathIn or pszMore."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the first path string. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by pszPathIn. If this path is fully qualfied, it is copied directly to the output buffer without being combined with the other path. This value can be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns an HRESULT code, including the following.  ",
    "remarks": "If both pszPathIn and pszMore are NULL or point to empty strings, a single backslash is copied to the buffer pointed to by pszPathOut. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCombineEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as pszPathIn or pszMore."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the first path string. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by pszPathIn. If this path is fully qualfied, it is copied directly to the output buffer without being combined with the other path. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the construction of \\\\?\\ paths longer than MAX_PATH. Note that cchPathOut must be greater than MAX_PATH. Note that cchPathOut must be greater than MAX_PATH. If it is not, this flag is ignored.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the concatenated path string. This is the same string pointed to by pszPathOut. If this function does not return successfully, this value is NULL. ",
    "remarks": "The directory path should be in the form of A:,B:, ..., Z:. The file path should be in a correct form that represents the file name part of the path. If the directory path ends with a backslash, the backslash will be maintained. Note that while lpszDir and lpszFile are both optional parameters, they cannot both be NULL.  ",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathCombine",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPathOut",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the combined path string. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszPathIn",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the first path. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMore",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the second path. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the path string already ends in a backslash, or an error code otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAddBackslash",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be NULL."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR A pointer that, when this function returns successfully, points to the new string's terminating null character. If the backslash could not be appended due to inadequate buffer size, this value is NULL. ",
    "remarks": "",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathAddBackslash",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpszPath",
        "description": "Type: LPTSTR A pointer to a buffer with a string that represents a path. The size of this buffer must be set to MAX_PATH to ensure that it is large enough to hold the returned string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the path string already ends in a backslash, or an error code otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAddBackslashEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be NULL."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR",
        "name": "*ppszEnd",
        "description": "A value that, when this function returns successfully, receives the address of a pointer to the terminating null character at the end of the string."
      },
      {
        "in_out": "_Out_opt_",
        "type": "size_t",
        "name": "*pcchRemaining",
        "description": "A pointer to a value that, when this function returns successfully, is set to the number of unused characters in the destination buffer, including the terminating null character."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns an HRESULT code, including the following.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAddExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended extension. This value should not be NULL.                           Note  If the original string already has a file name extension present, no new extension will be added and the original string will be unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExt",
        "description": "A pointer to the file name extension string. This string can be given either with or without a preceding period (\".ext\" or \"ext\")."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Adds a file name extension to a path string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if an extension was added, or FALSE otherwise. ",
    "remarks": "If there is already a file name extension present, no extension will be added. If the pszPath points to a NULL string, the result will be the file name extension only. If pszExtension points to a NULL string, an \".exe\" extension will be added. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathAddExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a buffer with the null-terminated string to which the file name extension will be appended. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszExtension",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the file name extension. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including the following.  ",
    "remarks": "This function inserts a backslash between the two strings, if one is not already present. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAppend",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the path to append to the end of the path pointed to by pszPath. UNC paths and paths beginning with the \"\\\\?\\\" sequence are accepted and recognized as fully-qualified paths. These paths replace the string pointed to by pszPath instead of being appended to it."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including the following.  ",
    "remarks": "This function inserts a backslash between the two strings, if one is not already present. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAppendEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer the path to append to the end of the path pointed to by pszPath. UNC paths and paths that begin with the sequence \\\\?\\ are accepted and recognized as fully-qualified paths. These paths replace the string pointed to by pszPath instead of being appended to it."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the building of \\\\?\\ paths longer than MAX_PATH.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.  Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Appends one path to the end of another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "This function automatically inserts a backslash between the two strings, if one is not already present. The path supplied in pszPath cannot begin with \"..\\\\\" or \".\\\\\" to produce a relative path string. If present, those periods are stripped from the output string. For example, appending \"path3\" to \"..\\\\path1\\\\path2\" results in an output of \"\\path1\\path2\\path3\" rather than \"..\\path1\\path2\\path3\".  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathAppend",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string to which the path specified in pszMore is appended. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMore",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be appended."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchFindExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path to search."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_Out_",
        "type": "PCWSTR",
        "name": "*ppszExt",
        "description": "The address of a pointer that, when this function returns successfully, points to the \".\" character that precedes the extension within pszPath. If no extension is found, it points to the string's terminating null character."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path for an extension.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the \".\" that precedes the extension within pszPath if an extension is found, or the address of the terminating null character otherwise. ",
    "remarks": "Note that a valid file name extension cannot contain a space. For more information on valid file name extensions, see File Type Handlers. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathFindExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search, including the extension being searched for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "Returns TRUE if the specified path is a root, or FALSE otherwise. ",
    "remarks": "The following table shows the PathCchIsRoot return value for various paths.  This function returns TRUE for paths such as \"\\\", \"X:\\\" or \"\\\\server\\share\". Paths such as \"..\\path2\" or \"\\\\server\\\" return FALSE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathCchIsRoot",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a path string refers to the root of a volume.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the specified path is a root, or FALSE otherwise. ",
    "remarks": "Returns TRUE for paths such as \"\\\", \"X:\\\" or \"\\\\server\\share\". Paths such as \"..\\path2\" or \"\\\\server\\\" return FALSE.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be validated."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the string was a root path or if no backslash was found, or an error code otherwise. ",
    "remarks": "This function will not remove the backslash from a root path string, such as \"C:\\\". ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveBackslash",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the trailing backslash from a given path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR A pointer that, when this function returns successfully and if a backslash has been removed, points to the terminating null character that has replaced the backslash at the end of the string. If the path did not include a trailing backslash, this value will point to the final character in the string.  ",
    "remarks": "",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathRemoveBackslash",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove the backslash."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the string was a root path or if no backslash was found, or an error code otherwise. ",
    "remarks": "This function will not remove the backslash from a root path string, such as \"C:\\\". ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveBackslashEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR",
        "name": "*ppszEnd",
        "description": "A value that, when this function returns successfully, receives the address of a pointer to end of the new string. If the string is a root path such as \"C:\\\", the pointer points to the backslash; otherwise the pointer points to the string's terminating null character."
      },
      {
        "in_out": "_Out_opt_",
        "type": "size_t",
        "name": "*pcchRemaining",
        "description": "A pointer to a value that, when this function returns successfully, receives the number of unused characters in the destination buffer, including the terminating null character. If the string is a root path such as \"C:\\\", this count includes the backslash in that string."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if no extension was found, or an error code otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the string contains the path with any extension removed. If no extension was found, the string is unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the file name extension from a path, if one is present.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value.  ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathRemoveExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH from which to remove the extension."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if there was nothing to remove, or an error code otherwise. ",
    "remarks": "The following table shows the effect of this function on a selection of path strings.  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveFileSpec",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the fully-qualified path string. When this function returns successfully, the string will have had its last element and its leading backslash removed. This function does not affect root paths such as \"C:\\\". In the case of a root path, the path string is returned unaltered. If a path string ends with a trailing backslash, only that backslash is removed."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the trailing file name and backslash from a path, if they are present.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if something was removed, or zero otherwise.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathRemoveFileSpec",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove the file name."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRenameExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, this value points to the same string, but with the renamed or added extension."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExt",
        "description": "A pointer to the new extension string. The leading '.' character is optional. In the case of an empty string (\"\"), any existing extension in the path string is removed."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Replaces the extension of a file name with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero if the new path and extension would exceed MAX_PATH characters. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathRenameExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR Pointer to a null-terminated string of length MAX_PATH in which to replace the extension."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszExt",
        "description": "Type: LPCTSTR Pointer to a character buffer that contains a '.' character followed by the new extension."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchSkipRoot",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string."
      },
      {
        "in_out": "_Out_",
        "type": "PCWSTR",
        "name": "*ppszRootEnd",
        "description": "The address of a pointer that, when this function returns successfully, points to the first character in a path following the drive letter or UNC server/share path elements. If the path consists of only a root, this value will point to the string's terminating null character."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention (UNC) server/share path elements.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR A pointer that, when this function returns successfully, points to the beginning of the subpath that follows the root (drive letter or UNC server/share). If the function encounters an error, this value will be NULL. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathSkipRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to parse."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the prefix was removed, S_FALSE if the path did not have a prefix to remove, or an HRESULT failure code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchStripPrefix",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the same path string will have had the prefix removed, if the prefix was present. If no prefix was present, the string will be unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the path was truncated, S_FALSE if the path was already just a root, or an HRESULT failure code. ",
    "remarks": "Some examples of the effect of this function:  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchStripToRoot",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, this string contains only the root information taken from that path."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes all file and directory elements in a path except for the root information.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if a valid drive letter was found in the path, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathStripToRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "szRoot",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be converted. When this function returns successfully, this string contains only the root information taken from that path."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "Returns TRUE if the string is a valid UNC path; otherwise, FALSE. This example feeds sample strings to the PathIsUNCEx function to demonstrate its return values. This table summarizes the results of the code above.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsUNCEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCWSTR",
        "name": "*ppszServer",
        "description": "A pointer to a string that, when this function returns successfully, receives the server portion of the UNC path. This value can be NULL if you don't need this information."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines if a path string is a valid Universal Naming Convention (UNC) path, as opposed to a path based on a drive letter.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string is a valid UNC path; otherwise, FALSE. This example feeds sample strings to the PathIsUNC function to demonstrate its return value. This table summarizes the results of the code above.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsUNC",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to validate."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves an object that implements an IQueryAssociations interface.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "For systems earlier than Windows Vista, use the AssocCreate function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "AssocCreateForClasses",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ASSOCIATIONELEMENT",
        "name": "*rgClasses",
        "description": "Type: const ASSOCIATIONELEMENT* A pointer to an array of ASSOCIATIONELEMENT structures."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cClasses",
        "description": "Type: ULONG The number of elements in the array pointed to by rgClasses."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired IID, normally IID_IQueryAssociations."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is normally IQueryAssociations."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves the value for a given property key using the file association information provided by the Namespace Extensions.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is to be used only by implementers of       IShellFolder Namespace Extensions. Other calling applications should use       IShellFolder2::GetDetailsEx to get a value       for a PROPERTYKEY. This function is to be used by       implementers of IShellFolder Namespace Extensions. The provided namespace extension must support the use of this API in one of the following three ways. If the ShellFolder being implemented contains items that are extensible through the file associations mechanism, then you can use this function to retrieve PropertyKeys that are declared for a given file association. For example, if a given Shell folder drives a details pane and you want the properties displayed in that pane to be governed by third party file name extensions, then you can use this function to return PKEY_PropList_PreviewDetails.  This key has a value that is declared in the registry for that file name extension with a semicolon delimited list of properties. There is a list of file name extension defined properties in the registry. This list includes but is not limited to the following: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "AssocGetDetailsOfPropKey",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellFolder",
        "name": "*psf",
        "description": "Type: IShellFolder* A pointer to the shell folder for which the details of the property key of the file association are being retrieved."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD The PIDL of the child item for which the file associations are being requested."
      },
      {
        "in_out": "_In_",
        "type": "PROPERTYKEY",
        "name": "*pkey",
        "description": "Type: PROPERTYKEY* A pointer to the property key that is being retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT",
        "name": "*pv",
        "description": "Type: VARIANT* When this function returns, contains the details of the given property key."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL",
        "name": "*pfFoundPropKey",
        "description": "Type: BOOL* When this function returns, contains a flag that is TRUE if the property key was found, otherwise FALSE."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Creates a context menu for a selected group of file folder objects.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "CDefFolderMenu_Create2",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE An ITEMIDLIST structure for the parent folder. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of ITEMIDLIST structures in the array pointed to by apidl."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "*apidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY* A pointer to an array of ITEMIDLIST structures, one for each item that is selected."
      },
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder",
        "name": "*psf",
        "description": "Type: IShellFolder* A pointer to the parent folder's IShellFolder interface. This IShellFolder must support the IDataObject interface. If it does not, CDefFolderMenu_Create2 fails and returns E_NOINTERFACE. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPFNDFMCALLBACK",
        "name": "lpfn",
        "description": "Type: LPFNDFMCALLBACK The LPFNDFMCALLBACK callback object. This value can be NULL if the callback object is not needed."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "nKeys",
        "description": "Type: UINT The number of registry keys in the array pointed to by ahkeys.  Note  The maximum number of registry keys is 16. Callers must enforce this limit as the API does not. Failing to do so can result in memory corruption."
      },
      {
        "in_out": "_In_opt_",
        "type": "HKEY",
        "name": "*ahkeys",
        "description": "Type: const HKEY* A pointer to an array of registry keys that specify the context menu handlers used with the menu's entries. For more information on context menu handlers, see Creating Context Menu Handlers. This array can contain a maximum of 16 registry keys."
      },
      {
        "in_out": "_Out_",
        "type": "IContextMenu",
        "name": "**ppcm",
        "description": "Type: IContextMenu** The address of an IContextMenu interface pointer that, when this function returns successfully, points to the IContextMenu object that represents the context menu."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Shuts down the content indexer and closes all open catalogs.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Ntquery.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function does not have an associated header or library file. To use this function, call LoadLibrary with the DLL name (Query.dll) to obtain a module handle, and then call GetProcAddress with that module handle and an architecture-specific function name to get the address of this function. Specify the function name as \"?CIShutdown@@YGXXZ\" for x86 architecture, or as \"?CIShutdown@@YAXXZ\" for x64 architecture. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "CIShutdown",
    "is_callback": 0,
    "dll": "Query.dll (version 5.1 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: LPWSTR* A pointer to an array of LPWSTR values, similar to argv. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The address returned by CommandLineToArgvW is the address of the first element in an array of LPWSTR values; the number of pointers in this array is indicated by pNumArgs. Each pointer to a null-terminated Unicode string represents an individual argument found on the command line. CommandLineToArgvW allocates a block of contiguous memory for pointers to the argument strings, and for the argument strings themselves; the calling application must free the memory used by the argument list when it is no longer needed. To free the memory, use a single call to the LocalFree function. For more information about the argv and argc argument convention, see Argument Definitions and Parsing C++ Command-Line Arguments. The GetCommandLineW function can be used to get a command line string that is suitable for use as the lpCmdLine parameter. This function accepts command lines that contain a program name; the program name can be enclosed in quotation marks or not. CommandLineToArgvW has a special interpretation of backslash characters when they are followed by a quotation mark character (\"), as follows:  The following example demonstrates how to parse a Unicode command-line string. The code frees the memory for the argument list at exit. ",
    "return_type": "LPWSTR*",
    "category": "Windows Shell",
    "name": "CommandLineToArgvW",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpCmdLine",
        "description": "Type: LPCWSTR Pointer to a null-terminated Unicode string that contains the full command line. If this parameter is an empty string the function returns the path to the current executable file."
      },
      {
        "in_out": "_Out_",
        "type": "int",
        "name": "*pNumArgs",
        "description": "Type: int* Pointer to an int that receives the number of array elements returned, similar to argc."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Creates a per-user, per-app profile for Windows Store apps.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "If this function succeeds, it returns a standard HRESULT code, including the following:  ",
    "remarks": "A profile contains folders and registry storage that are per-user and per-app. The folders have ACLs that prevent them from being accessed by other users and apps. These folders can be accessed by calling SHGetKnownFolderPath. The function creates a profile for the current user. To create a profile on behalf of another user, you must impersonate that user. To create profiles for multiple users of the same app, you must call CreateAppContainerProfile for each user. ",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "CreateAppContainerProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerName",
        "description": "The name of the app container. To ensure uniqueness, it is recommended that this string contains the app name as well as the publisher. This string can be up to 64 characters in length.  Further, it must fit into the pattern described by the regular expression \"[-_. A-Za-z0-9]+\"."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDisplayName",
        "description": "The display name. This string can be up to 512 characters in length."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDescription",
        "description": "A description for the app container. This string can be up to 2048 characters in length."
      },
      {
        "in_out": "_In_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "pCapabilities",
        "description": "The SIDs that define the requested capabilities."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCapabilityCount",
        "description": "The number of SIDs in pCapabilities."
      },
      {
        "in_out": "_Out_",
        "type": "PSID",
        "name": "*ppSidAppContainerSid",
        "description": "The SID for the profile. This buffer must be freed using the FreeSid function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the environment variables for the specified user. This block can then be passed to the CreateProcessAsUser function.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "To free the buffer when you have finished with the environment block, call the  DestroyEnvironmentBlock function. If the environment block is passed to  CreateProcessAsUser, you must also specify the CREATE_UNICODE_ENVIRONMENT flag. After CreateProcessAsUser has returned, the new process has a copy of the environment block, and DestroyEnvironmentBlock can be safely called. User-specific environment variables such as %USERPROFILE% are set only when the user's profile is loaded. To load a user's profile, call the  LoadUserProfile function. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "CreateEnvironmentBlock",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "*lpEnvironment",
        "description": "Type: LPVOID* When this function returns, receives a pointer to the new environment block. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\\0\\0)."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, returned from the  LogonUser function. If this is a primary token, the token must have TOKEN_QUERY and TOKEN_DUPLICATE access. If the token is an impersonation token, it must have TOKEN_QUERY access. For more information, see  Access Rights for Access-Token Objects.                        If this parameter is NULL, the returned environment block contains system variables only."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bInherit",
        "description": "Type: BOOL Specifies whether to inherit from the current process' environment. If this value is TRUE, the process inherits the current process' environment. If this value is FALSE, the process does not inherit the current process' environment."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. Note that the function returns before the process has finished initialization. If a required DLL cannot be located or fails to initialize, the process is terminated. To get the termination status of a process, call GetExitCodeProcess. ",
    "remarks": "CreateProcessAsUser must be able to open the primary token of the calling process with the TOKEN_DUPLICATE and TOKEN_IMPERSONATE access rights. By default,  CreateProcessAsUser creates the new process on a noninteractive window station with a desktop that is not visible and cannot receive user input. To enable user interaction with the new process, you must specify the name of the default interactive window station and desktop, \"winsta0\\default\", in the lpDesktop member of the  STARTUPINFO structure. In addition, before calling  CreateProcessAsUser, you must change the discretionary access control list (DACL) of both the default interactive window station and the default desktop. The DACLs for the window station and desktop must grant access to the user or the logon session represented by the hToken parameter. CreateProcessAsUser does not load the specified user's profile into the HKEY_USERS registry key. Therefore, to access the information in the HKEY_CURRENT_USER registry key, you must load the user's profile information into HKEY_USERS with the  LoadUserProfile function before calling  CreateProcessAsUser. Be sure to call UnloadUserProfile after the new process exits. If the lpEnvironment parameter is NULL, the new process inherits the environment of the calling process.  CreateProcessAsUser does not automatically modify the environment block to include environment variables specific to the user represented by hToken. For example, the USERNAME and USERDOMAIN variables are inherited from the calling process if lpEnvironment is NULL. It is your responsibility to prepare the environment block for the new process and specify it in lpEnvironment. The  CreateProcessWithLogonW    and CreateProcessWithTokenW functions are similar to  CreateProcessAsUser, except that the caller does not need to call the  LogonUser function to authenticate the user and get a token. CreateProcessAsUser allows you to access the specified directory and executable image in the security context of the caller or the target user. By default,  CreateProcessAsUser accesses the directory and executable image in the security context of the caller. In this case, if the caller does not have access to the directory and executable image, the function fails. To access the directory and executable image using the security context of the target user, specify hToken in a call to the  ImpersonateLoggedOnUser function before calling  CreateProcessAsUser. The process is assigned a process identifier. The identifier is valid until the process terminates. It can be used to identify the process, or specified in the  OpenProcess function to open a handle to the process. The initial thread in the process is also assigned a thread identifier. It can be specified in the  OpenThread function to open a handle to the thread. The identifier is valid until the thread terminates and can be used to uniquely identify the thread within the system. These identifiers are returned in the  PROCESS_INFORMATION structure. The calling thread can use the  WaitForInputIdle function to wait until the new process has finished its initialization and is waiting for user input with no input pending. This can be useful for synchronization between parent and child processes, because  CreateProcessAsUser returns without waiting for the new process to finish its initialization. For example, the creating process would use  WaitForInputIdle before trying to find a window associated with the new process. The preferred way to shut down a process is by using the  ExitProcess function, because this function sends notification of approaching termination to all DLLs attached to the process. Other means of shutting down a process do not notify the attached DLLs. Note that when a thread calls  ExitProcess, other threads of the process are terminated without an opportunity to execute any additional code (including the thread termination code of attached DLLs). For more information, see  Terminating a Process. The lpApplicationName parameter can be NULL, in which case the executable name must be the first white space\u00e2\u0080\u0093delimited string in lpCommandLine. If the executable or path name has a space in it, there is a risk that a different executable could be run because of the way the function parses spaces. The following example is dangerous because the function will attempt to run \"Program.exe\", if it exists, instead of \"MyApp.exe\". If a malicious user were to create an application called \"Program.exe\" on a system, any program that incorrectly calls  CreateProcessAsUser using the Program Files directory will run this application instead of the intended application. To avoid this problem, do not pass NULL for lpApplicationName. If you do pass NULL for lpApplicationName, use quotation marks around the executable path in lpCommandLine, as shown in the example below. PowerShell:  When the CreateProcessAsUser function is used to implement a cmdlet in PowerShell version 2.0, the cmdlet operates correctly for both fan-in and fan-out remote sessions. Because of certain security scenarios, however, a cmdlet implemented with CreateProcessAsUser only operates correctly in PowerShell version 3.0 for fan-in remote sessions; fan-out remote sessions will fail because of insufficient client security privileges. To implement a cmdlet that works for both fan-in and fan-out remote sessions in PowerShell version 3.0, use the CreateProcess function. For an example, see  Starting an Interactive Client Process. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "CreateProcessAsUser",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "A handle to the primary token that represents a user. The handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access rights. For more information, see  Access Rights for Access-Token Objects. The user represented by the token must have read and execute access to the application specified by the lpApplicationName or the lpCommandLine parameter.     To get a primary token that represents the specified user, call the  LogonUser function. Alternatively, you can call the  DuplicateTokenEx function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client. If hToken is a restricted version of the caller's primary token, the SE_ASSIGNPRIMARYTOKEN_NAME privilege is not required. If the necessary privileges are not already enabled,  CreateProcessAsUser enables them for the duration of the call. For more information, see  Running with Special Privileges. Terminal Services:  The process is run in the session specified in the token. By default, this is the same session that called LogonUser. To change the session, use the  SetTokenInformation function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpApplicationName",
        "description": "The name of the module to be executed. ..."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPTSTR",
        "name": "lpCommandLine",
        "description": "The command line to be executed. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpProcessAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new process object and determines whether child processes can inherit the returned handle to the process. If lpProcessAttributes is NULL or lpSecurityDescriptor is NULL, the process gets a default security descriptor and the handle cannot be inherited. The default security descriptor is that of the user referenced in the hToken parameter. This security descriptor may not allow access for the caller, in which case the process may not be opened again after it is run. The process handle is valid and will continue to have full access rights."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpThreadAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread object and determines whether child processes can inherit the returned handle to the thread. If lpThreadAttributes is NULL or lpSecurityDescriptor is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The default security descriptor is that of the user referenced in the hToken parameter. This security descriptor may not allow access for the caller."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bInheritHandles",
        "description": "If this parameter is TRUE, each inheritable handle in the calling process is inherited by the new process. If the parameter is FALSE, the handles are not inherited. Note that inherited handles have the same value and access rights as the original handles. Terminal Services:  You cannot inherit handles across sessions. Additionally, if this parameter is TRUE, you must create the process in the same session as the caller."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCreationFlags",
        "description": "The flags that control the priority class and the creation of the process. For a list of values, see  Process Creation Flags.     This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see  GetPriorityClass. If none of the priority class flags is specified, the priority class defaults to NORMAL_PRIORITY_CLASS unless the priority class of the creating process is IDLE_PRIORITY_CLASS or BELOW_NORMAL_PRIORITY_CLASS. In this case, the child process receives the default priority class of the calling process."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "lpEnvironment",
        "description": "A pointer to an environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process.     An environment block consists of a null-terminated block of null-terminated strings. Each string is in the following form: name=value\\0 Because the equal sign is used as a separator, it must not be used in the name of an environment variable. An environment block can contain either Unicode or ANSI characters. If the environment block pointed to by lpEnvironment contains Unicode characters, be sure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT.  If this parameter is NULL and the environment block of the parent process contains Unicode characters, you must also ensure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. The ANSI version of this function, CreateProcessAsUserA fails if the total size of the environment block for the process exceeds 32,767 characters. Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block. A Unicode environment block is terminated by four zero bytes: two for the last string, two more to terminate the block. Windows Server 2003 and Windows XP:  If the size of the combined user and system environment variable exceeds 8192 bytes, the process created by CreateProcessAsUser no longer runs with the environment block passed to the function by the parent process. Instead, the child process runs with the environment block returned by the CreateEnvironmentBlock function.  To retrieve a copy of the environment block for a given user, use the  CreateEnvironmentBlock function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpCurrentDirectory",
        "description": "The full path to the current directory for the process. The string can also specify a UNC path.  If this parameter is NULL, the new process will have the same current drive and directory as the calling process. (This feature is provided primarily for shells that need to start an application and specify its initial drive and working directory.)"
      },
      {
        "in_out": "_In_",
        "type": "LPSTARTUPINFO",
        "name": "lpStartupInfo",
        "description": "A pointer to a  STARTUPINFO or STARTUPINFOEX structure. The user must have full access to both the specified window station and desktop. If you want the process to be interactive, specify winsta0\\default. If the lpDesktop member is NULL, the new process inherits the desktop and window station of its parent process.  If this member is an empty string, \"\", the new process connects to a window station using the rules described in Process Connection to a Window Station. To set extended attributes, use a STARTUPINFOEX structure and specify EXTENDED_STARTUPINFO_PRESENT in the dwCreationFlags parameter. Handles in  STARTUPINFO or STARTUPINFOEX must be closed with  CloseHandle when they are no longer needed. Important  The caller is responsible for ensuring that the standard handle fields in STARTUPINFO contain valid handle values. These fields are copied unchanged to the child process without validation, even when the dwFlags member specifies STARTF_USESTDHANDLES. Incorrect values can cause the child process to misbehave or crash. Use the Application Verifier runtime verification tool to detect invalid handles."
      },
      {
        "in_out": "_Out_",
        "type": "LPPROCESS_INFORMATION",
        "name": "lpProcessInformation",
        "description": "A pointer to a  PROCESS_INFORMATION structure that receives identification information about the new process.     Handles in  PROCESS_INFORMATION must be closed with  CloseHandle when they are no longer needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates a new most recently used (MRU) list.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: int Returns a handle to the new MRU list, or 0 in case of an error. ",
    "remarks": "This function is not included in a public header or library. It can be accessed through GetProcAddress or extracted from comctl32.dll by its ordinal, which is 400 for CreateMRUListW. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "CreateMRUListW",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPMRUINFO",
        "name": "lpmi",
        "description": "Type: LPMRUINFO A pointer to an MRUINFO structure defining the MRU list."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a new user profile.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "The caller must have administrator privileges to call this function. ",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "CreateProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszUserSid",
        "description": "Type: LPCWSTR Pointer to the SID of the user as a string."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszUserName",
        "description": "Type: LPCWSTR The user name of the new user. This name is used as the base name for the profile directory."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pszProfilePath",
        "description": "Type: LPWSTR When this function returns, contains a pointer to the full path of the profile."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchProfilePath",
        "description": "Type: DWORD Size of the buffer pointed to by pszProfilePath, in characters."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Provides default processing for any messages that a screen saver application does not process.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: LONG The return value specifies the result of the message processing and depends on the message sent. ",
    "remarks": "A screen saver application's ScreenSaverProc window procedure should use DefScreenSaverProc instead of the DefWindowProc function to provide default message processing. The DefScreenSaverProc function passes any messages that do not affect screen saver operation to DefWindowProc. The following table describes how the DefScreenSaverProc processes a variety of window messages.  ",
    "return_type": "LONG",
    "category": "Windows Shell",
    "name": "DefScreenSaverProc",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The identifier of the screen saver window."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "msg",
        "description": "Type: UINT The message to be processed. The DefScreenSaverProc function responds to messages that affect the screen saver's operation, as detailed in the Remarks section. If a screen saver application must perform a different action in response to any of these messages, the application's ScreenSaverProc window procedure should process the message."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: LRESULT The returned value is specific to the message sent. This value should be ignored. ",
    "remarks": "You do not need to call the default window procedure; this function calls it automatically. The SUBCLASS module defines helper functions that are used to subclass windows. The code maintains a single property on the subclassed window and dispatches various subclass callbacks to its clients as required. The client is provided reference data and a default processing API. A subclass callback is identified by a unique pairing of a callback function pointer and an unsigned ID value. Each callback can also store a single DWORD of reference data, which is passed to the callback function when it is called to filter messages. No reference counting is performed for the callback; it may repeatedly call SetWindowSubclass to alter the value of its reference data element. ",
    "return_type": "LRESULT",
    "category": "Windows Shell",
    "name": "DefSubclassProc",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.8 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uMsg",
        "description": "Type: UINT A value of type unsigned int that specifies a window message."
      },
      {
        "in_out": "_In_",
        "type": "WPARAM",
        "name": "WPARAM",
        "description": "Type: WPARAM Specifies additional message information. The contents of this parameter depend on the value of the window message."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "LPARAM",
        "description": "Type: LPARAM Specifies additional message information. The contents of this parameter depend on the value of the window message. Note: On 64-bit versions of Windows LPARAM is a 64-bit value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Deletes the specified per-user, per-app profile.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "If this function succeeds, it returns a standard HRESULT code, including the following:  ",
    "remarks": "To ensure the best results, close all file handles in the profile storage locations before calling the DeleteAppContainerProfile function. Otherwise, this function may not be able to completely remove the storage locations for the profile. This function deletes the profile for the current user. To delete the profile for another user, you must impersonate that user. If the function fails, the status of the profile is undetermined, and you should call DeleteAppContainerProfile again to complete the operation. ",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "DeleteAppContainerProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerName",
        "description": "The name given to the profile in the call to the CreateAppContainerProfile function. This string is at most 64 characters in length, and  fits into the pattern described by the regular expression \"[-_. A-Za-z0-9]+\"."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Deletes the user profile and all user-related settings from the specified computer. The caller must have administrative privileges to delete a user's profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "DeleteProfile might fail when passed the security identifier (SID) of the local system account (S-1-5-18). For more information, see KB890212. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "DeleteProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpSidString",
        "description": "Type: LPCTSTR Pointer to a string that specifies the user      SID."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpProfilePath",
        "description": "Type: LPCTSTR Pointer to a string that specifies the profile path. If this parameter is NULL, the function obtains the path from the registry."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpComputerName",
        "description": "Type: LPCTSTR Pointer to a string that specifies the name of the computer from which the profile is to be deleted. If this parameter is NULL, the local computer name is used.                               Note  As of Windows Vista, this parameter must be NULL. If it is not, this function fails with the error code ERROR_INVALID_PARAMETER."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees environment variables created by the CreateEnvironmentBlock function.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "DestroyEnvironmentBlock",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpEnvironment",
        "description": "Type: LPVOID Pointer to the environment block created by  CreateEnvironmentBlock. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\\0\\0)."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the SID of the specified profile.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "DeriveAppContainerSidFromAppContainerName",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerName",
        "description": "The name of the profile."
      },
      {
        "in_out": "_Out_",
        "type": "PSID",
        "name": "*ppsidAppContainerSid",
        "description": "The SID for the profile. This buffer must be freed using the FreeSid function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName is reserved for future use.]",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Reserved. ",
    "remarks": "",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "psidAppContainerSid",
        "description": "Reserved."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszRestrictedAppContainerName",
        "description": "Reserved."
      },
      {
        "in_out": "_Out_",
        "type": "PSID",
        "name": "*ppsidRestrictedAppContainerSid",
        "description": "Reserved."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Implemented by many of the Windows Shell DLLs to allow applications to obtain DLL-specific version information.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is exported by name from each DLL that implements it. Currently, most of the Windows Shell and controls DLLs implement DllGetVersion. These include, but are not limited to, Shell32.dll, Comctl32.dll, Shdocvw.dll, and Shlwapi.dll. To call this function, use the LoadLibrary and GetProcAddress functions to obtain the function pointer. The DLLGETVERSIONPROC type is used as the data type to define a pointer to a DllGetVersion function. Use the pointer when calling the function dynamically by loading the library and getting the function's address. See Shell and Shlwapi DLL Versions for a detailed discussion of the different file versions, and how to use DllGetVersion. ",
    "return_type": "HRESULT CALLBACK",
    "category": "Windows Shell",
    "name": "DllGetVersion",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "DLLVERSIONINFO",
        "name": "*pdvi",
        "description": "Type: DLLVERSIONINFO* A pointer to a DLLVERSIONINFO structure that receives the version information. The cbSize member must be filled in before you call this function.  Version 5.0. DLLs that are shipped with Windows 2000 or later systems may return a DLLVERSIONINFO2 structure. To maintain backward compatibility, the first member of a DLLVERSIONINFO2 structure is a DLLVERSIONINFO structure."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Registers whether a window accepts dropped files.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "No return value. ",
    "remarks": "An application that calls DragAcceptFiles with the fAccept parameter set to TRUE has identified itself as able to process the WM_DROPFILES message from File Manager. ",
    "return_type": "VOID",
    "category": "Windows Shell",
    "name": "DragAcceptFiles",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The identifier of the window that is registering whether it will accept dropped files."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fAccept",
        "description": "Type: BOOL A value that indicates if the window identified by the hWnd parameter accepts dropped files. This value is TRUE to accept dropped files or FALSE to discontinue accepting dropped files."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Releases memory that the system allocated for use in transferring file names to the application.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "No return value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Windows Shell",
    "name": "DragFinish",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HDROP",
        "name": "hDrop",
        "description": "Type: HDROP Identifier of the structure that describes dropped files. This handle is retrieved from the wParam parameter of the WM_DROPFILES message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: UINT A nonzero value indicates a successful call. When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character. If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF. If the index value is between zero and the total number of dropped files, and the lpszFile buffer address is NULL, the return value is the required size, in characters, of the buffer, not including the terminating null character. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "DragQueryFile",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDROP",
        "name": "hDrop",
        "description": "Type: HDROP Identifier of the structure that contains the file names of the dropped files."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "iFile",
        "description": "Type: UINT Index of the file to query. If the value of this parameter is 0xFFFFFFFF, DragQueryFile returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, DragQueryFile copies the file name with the corresponding value to the buffer pointed to by the lpszFile parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszFile",
        "description": "Type: LPTSTR The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is NULL, DragQueryFile returns the required size, in characters, of this buffer."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cch",
        "description": "Type: UINT The size, in characters, of the lpszFile buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL TRUE if the drop occurred in the client area of the window; otherwise FALSE. ",
    "remarks": "The window for which coordinates are returned is the window that received the WM_DROPFILES message. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DragQueryPoint",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDROP",
        "name": "hDrop",
        "description": "Type: HDROP Handle of the drop structure that describes the dropped file."
      },
      {
        "in_out": "_Out_",
        "type": "POINT",
        "name": "*lppt",
        "description": "Type: POINT* Pointer to a POINT structure that, when this function returns successfully, receives the coordinates of the mouse pointer at the time the file was dropped."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Expands the source string by using the environment block established for the specified user.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example source string: When ExpandEnvironmentStringsForUser returns, the destination string expands as follows: ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "ExpandEnvironmentStringsForUser",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_IMPERSONATE and TOKEN_QUERY access. In addition, as of Windows 7 the token must also have TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects.  If hToken is NULL, the environment block contains system variables only."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpSrc",
        "description": "Type: LPCTSTR Pointer to the null-terminated source string to be expanded."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpDest",
        "description": "Type: LPTSTR Pointer to a buffer that receives the expanded strings."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Type: DWORD Specifies the size of the lpDest buffer, in TCHARs."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Initializes or reinitializes the system image list.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL TRUE if the cache was successfully refreshed, FALSE if the initialization failed. ",
    "remarks": "If you are using system image lists in your own process, you must call FileIconInit at the following times: FileIconInit is not included in a header file. You must call it directly from Shell32.dll, using ordinal 660. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "FileIconInit",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fRestoreCache",
        "description": "Type: BOOL TRUE to restore the system image cache from disk; FALSE otherwise."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HINSTANCE Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error. The following table lists possible error values.  ",
    "remarks": "Use FindExecutable for documents. If you want to retrieve the path of an executable file, use the following: Here, pszExecutableName is a pointer to a null-terminated string that specifies the name of the executable file, pszPath is a pointer to the null-terminated string buffer that receives the path to the executable file, and pcchOut is a pointer to a DWORD that specifies the number of characters in the pszPath buffer. When the function returns, pcchOut is set to the number of characters actually placed in the buffer. See AssocQueryString for more information. When FindExecutable returns, the lpResult parameter may contain the path to the Dynamic Data Exchange (DDE) server started if a server does not respond to a request to initiate a DDE conversation with the DDE client application. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "FindExecutable",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFile",
        "description": "Type: LPCTSTR The address of a null-terminated string that specifies a file name. This file should be a document."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpDirectory",
        "description": "Type: LPCTSTR The address of a null-terminated string that specifies the default directory. This value can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpResult",
        "description": "Type: LPTSTR The address of a buffer that receives the file name of the associated executable file. This file name is a null-terminated string that specifies the executable file started when an \"open\" by association is run on the file specified in the lpFile parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu. This parameter must contain a valid non-null value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the resources that have been allocated for a CONFIRM_CONFLICT_ITEM structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Syncmgr.idl",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeConfirmConflictItem",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "CONFIRM_CONFLICT_ITEM",
        "name": "*pcci",
        "description": "Type: CONFIRM_CONFLICT_ITEM* A pointer to a CONFIRM_CONFLICT_ITEM structure that stores pointers to the items for which memory is to be freed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees the memory used by an pointer to an item identifier list (PIDL) list array.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeIDListArray",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PIDLIST_RELATIVE",
        "name": "*ppidls",
        "description": "Type: PIDLIST_RELATIVE* A pointer to the list of cItems PIDLs, stored as an array."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cItems",
        "description": "Type: UINT The number of items in the array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Releases the memory space for the array of pointers to child item IDs. This releases both the PITEMID_CHILDs within the array and the array itself.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeIDListArrayChild",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PITEMID_CHILD",
        "name": "*ppidls",
        "description": "Type: PITEMID_CHILD* A pointer to the PIDL list, stored as an array of cItems elements."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cItems",
        "description": "Type: UINT The number of items in the array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Releases the memory space for the pointer to an item identifier list (PIDL) array. This releases both the PIDLIST_ABSOLUTEs within the array and the array itself.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeIDListArrayFull",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PIDLIST_ABSOLUTE",
        "name": "*ppidls",
        "description": "Type: PIDLIST_ABSOLUTE* A pointer to the PIDL list, stored as an array of cItems elements."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cItems",
        "description": "Type: UINT The number of items in the array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This is an inline helper function that calls CoTaskMemFree on the fields in the structure that need to be freed. Its implementation can be seen in the header file. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeKnownFolderDefinitionFields",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "KNOWNFOLDER_DEFINITION",
        "name": "*pKFD",
        "description": "Type: KNOWNFOLDER_DEFINITION* A pointer to a KNOWNFOLDER_DEFINITION structure that contains information about the given known folder."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the handle associated with the most recently used (MRU) list and writes cached data to the registry.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: int Returns a non-negative value if successful, -1 otherwise. ",
    "remarks": "If the MRU list was created using the MRU_CACHEWRITE flag, calling FreeMRUList causes any changes not yet written to the version of the MRU list stored in registry to be written at this time. This function is not included in a public header or library. It must be extracted from comctl32.dll by ordinal 152. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "FreeMRUList",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hMRU",
        "description": "Type: HANDLE The handle of the MRU list to free."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the path to the root of the directory that contains program data shared by all users.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetAllUsersProfileDirectory in Windows XP: The following is an example of the path returned by GetAllUsersProfileDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "GetAllUsersProfileDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path. Set this value to NULL to determine the required size of the buffer, including the terminating null character."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD A pointer to the size of the lpProfileDir buffer, in TCHARs.                               If the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the path of the local app data folder for the specified app container.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "This function returns an HRESULT code, including but not limited to the following:  ",
    "remarks": "The path retrieved through this function is the same path that you would get by calling the SHGetKnownFolderPath function with FOLDERID_LocalAppData. If a thread token is set, this function uses the app container for the current user. If no thread token is set, this function uses the app container associated with the process identity. ",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "GetAppContainerFolderPath",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerSid",
        "description": "A pointer to the SID of the app container."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszPath",
        "description": "The address of a pointer to a string that, when this function returns successfully, receives the path of the local folder. It is the responsibility of the caller to free this string when it is no longer needed by calling the CoTaskMemFree function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the location of the registry storage associated with an app container.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: HRESULT This function returns an HRESULT code, including but not limited to the following:  ",
    "remarks": "The function gets the registry storage for the current user. To get the registry storage for another user, you must impersonate that user. ",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "GetAppContainerRegistryLocation",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REGSAM",
        "name": "desiredAccess",
        "description": "Type: REGSAM The desired registry access."
      },
      {
        "in_out": "_Out_",
        "type": "PHKEY",
        "name": "phAppContainerKey",
        "description": "Type: PHKEY A pointer to an HKEY that, when this function returns successfully, receives the registry storage location for the current profile."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a window that has been set as a delegate for an app's primary foreground window for the purpose of associating the delegate window with the app's contracts.  Use this function if you are a developer writing a Windows Store app in native C++.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HWND The handle of the delegate window. ",
    "remarks": "This is an inline function, with the source code included in the header file. It is not included in a .lib or .dll file. ",
    "return_type": "HWND",
    "category": "Windows Shell",
    "name": "GetContractDelegateWindow",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndSource",
        "description": "Type: HWND The handle of the window whose delegate should be retrieved."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the application-defined, explicit Application User Model ID (AppUserModelID) for the current process.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The AppUserModelID retrieved by this function was set earlier through SetCurrentProcessExplicitAppUserModelID. An application can only retrieve an AppUserModelID that has been explicitly set. System-assigned default AppUserModelIDs cannot be retrieved. If the application requires knowledge of its AppUserModelID it should set one explicitly. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "GetCurrentProcessExplicitAppUserModelID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*AppID",
        "description": "Type: PWSTR* A pointer that receives the address of the AppUserModelID assigned to the process. The caller is responsible for freeing this string with CoTaskMemFree when it is no longer needed."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the path to the root of the default user's profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetDefaultUserProfileDirectory in Windows XP: The following is an example of the path returned by GetDefaultUserProfileDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "GetDefaultUserProfileDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the default user's profile directory. Set this value to NULL to determine the required size of the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD Specifies the size of the lpProfileDir buffer, in TCHARs.                               If the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the dots per inch (dpi) occupied by a SHELL_UI_COMPONENT based on the current scale factor and PROCESS_DPI_AWARENESS.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "The DPI required for an icon of this type. ",
    "remarks": "",
    "return_type": "UINT WINAPI",
    "category": "Windows Shell",
    "name": "GetDpiForShellUiComponent",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHELL_UI_COMPONENT",
        "name": "component",
        "description": "The type of shell component."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the Help context identifier associated with the specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: DWORD Returns the Help context identifier if the menu has one, or zero otherwise. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "GetMenuContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu for which the Help context identifier is to be retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the path to the root directory where user profiles are stored.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetProfilesDirectory in Windows XP: The following is an example of the path returned by GetProfilesDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "GetProfilesDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpProfilesDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the profiles directory. Set this value to NULL to determine the required size of the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD Specifies the size of the lpProfilesDir buffer, in TCHARs.                               If the buffer specified by lpProfilesDir is not large enough or lpProfilesDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the type of profile loaded for the current user.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "If the user profile is not already loaded, the function fails. Note that the caller must have KEY_READ access to HKEY_LOCAL_MACHINE. This access right is granted by default. For more information, see Registry Key Security and Access Rights. If the profile type is PT_ROAMING_PREEXISTING, Explorer will not reinitialize default programs associations when a profile is loaded on a machine for the first time. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "GetProfileType",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD",
        "name": "*pdwFlags",
        "description": "Type: DWORD* Pointer to a variable that receives the profile type. If the function succeeds, it sets one or more of the following values:  PT_MANDATORY   The user has a Mandatory User Profiles.  PT_ROAMING   The user has a Roaming User Profiles.  PT_ROAMING_PREEXISTING    \t\t\t\t\t\tThe user has a Roaming User Profile that was created on another PC and is being downloaded. \t\t\t\t\t\tThis profile type implies PT_ROAMING. \t\t\t\t\t  PT_TEMPORARY   The user has a Temporary User Profiles; it will be deleted at logoff."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Gets the preferred scale factor for a display device.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "Type: DEVICE_SCALE_FACTOR A value that indicates the scale factor that should be used with the specified DISPLAY_DEVICE_TYPE.  ",
    "remarks": "The default DEVICE_SCALE_FACTOR is SCALE_100_PERCENT. Use the scale factor that is returned to scale point values for fonts and pixel values. ",
    "return_type": "STDAPI_(DEVICE_SCALE_FACTOR)",
    "category": "Windows Shell",
    "name": "GetScaleFactorForDevice",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DISPLAY_DEVICE_TYPE",
        "name": "deviceType",
        "description": "Type: DISPLAY_DEVICE_TYPE The value that indicates the type of the display device."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the scale factor of a specific monitor. This function replaces GetScaleFactorForDevice.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Your code needs to handle the WM_WINDOWPOSCHANGED message in addition to the scale change event registered through RegisterScaleChangeEvent, because the app window can be moved between monitors. In response to the WM_WINDOWPOSCHANGED message, call MonitorFromWindow, followed by GetScaleFactorForMonitor to get the scale factor of the monitor which the app window is on. Your code can then react to any dots per inch (dpi) change by reloading assets and changing layout. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "GetScaleFactorForMonitor",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMONITOR",
        "name": "hMon",
        "description": "The monitor's handle."
      },
      {
        "in_out": "_Out_",
        "type": "DEVICE_SCALE_FACTOR",
        "name": "*pScale",
        "description": "When this function returns successfully, this value points to one of the DEVICE_SCALE_FACTOR values that specify the scale factor of the specified monitor.                          If the function call fails, this value points to a valid scale factor so that apps can opt to continue on with incorrectly sized resources."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the path to the root directory of the specified user's profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetUserProfileDirectory in Windows XP: The following is an example of the path returned by GetUserProfileDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "GetUserProfileDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE A token for the user, which is returned by the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or  OpenThreadToken function. The token must have TOKEN_QUERY access. For more information, see Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the specified user's profile directory."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD Specifies the size of the lpProfileDir buffer, in TCHARs.                               If the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the Help context identifier, if any, associated with the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: DWORD Returns the Help context identifier if the window has one, or zero otherwise. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "GetWindowContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window for which the Help context identifier is to be retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the reference data for the specified window subclass callback.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL  ",
    "remarks": "To use GetWindowSubclass, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see Enabling Visual Styles. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetWindowSubclass",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The handle of the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "SUBCLASSPROC",
        "name": "pfnSubclass",
        "description": "Type: SUBCLASSPROC A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIdSubclass",
        "description": "Type: UINT_PTR UINT_PTR subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions of Windows this is a 64-bit value."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD_PTR",
        "name": "*pdwRefData",
        "description": "Type: DWORD_PTR* A pointer to a DWORD which will return the reference data. Note: On 64-bit versions of Windows, pointers are 64-bit values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Verifies that the container structure of an IDList is valid.",
    "library": "",
    "min_server": "",
    "header": "Shlobj.h",
    "return_value": "TRUE if the IDList structure is valid; otherwise, FALSE. ",
    "remarks": "This function should be used by any code that reads an IDList from a persisted format to ensure that invalid forms do not lead to a security exploit in the code that interprets the IDList. Shell data sources are responsible for validating private sections of the ITEMIDs. Hidden data is validated by the functions that interpret that data. ",
    "return_type": "BOOL __inline",
    "category": "Windows Shell",
    "name": "IDListContainerIsConsistent",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "A pointer to the IDList to validate."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbAlloc",
        "description": "The size, in bytes, of the PIDL specified in the pidl parameter."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Appends or prepends an SHITEMID structure to an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_RELATIVE Returns the ITEMIDLIST structure specified by pidl, with pmkid appended or prepended. Returns NULL on failure. ",
    "remarks": "",
    "return_type": "PIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILAppendID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PIDLIST_RELATIVE A pointer to an ITEMIDLIST structure. When the function returns, the SHITEMID structure specified by pmkid is appended or prepended."
      },
      {
        "in_out": "_In_",
        "type": "LPSHITEMID",
        "name": "pmkid",
        "description": "Type: LPSHITEMID A pointer to a SHITEMID structure to be appended or prepended to pidl."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fAppend",
        "description": "Type: BOOL Value that is set to TRUE to append pmkid to pidl. Set this value to FALSE to prepend pmkid to pidl."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_RELATIVE Returns a pointer to a copy of the ITEMIDLIST structure pointed to by pidl. ",
    "remarks": "When you are finished with the cloned ITEMIDLIST structure, release it with ILFree to avoid memory leaks. ",
    "return_type": "PIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILClone",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be cloned."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones a child ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PCUITEMID_CHILD A pointer to a copy of the child ITEMIDLIST structure pointed to by pidl. ",
    "remarks": "When you are finished with the cloned ITEMIDLIST structure, release it with ILFree to avoid memory leaks. ",
    "return_type": "PCUITEMID_CHILD",
    "category": "Windows Shell",
    "name": "ILCloneChild",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to the child ITEMIDLIST structure to be cloned."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones the first SHITEMID structure in an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PITEMID_CHILD A pointer to an ITEMIDLIST structure that contains the first SHITEMID structure from the ITEMIDLIST structure specified by pidl. Returns NULL on failure. ",
    "remarks": "",
    "return_type": "PITEMID_CHILD",
    "category": "Windows Shell",
    "name": "ILCloneFirst",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure that you want to clone."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones a full, or absolute, ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE A pointer to a copy of the ITEMIDLIST structure pointed to by pidl. ",
    "remarks": "When you are finished with the cloned ITEMIDLIST structure, release it with ILFree to avoid memory leaks. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "ILCloneFull",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_ABSOLUTE A pointer to the full, or absolute, ITEMIDLIST structure to be cloned."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Combines two ITEMIDLIST structures.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST structure is a clone of the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL. ",
    "remarks": "",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "ILCombine",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl1",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to the first ITEMIDLIST structure."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl2",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns the ITEMIDLIST structure associated with a specified file path.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns a pointer to an ITEMIDLIST structure that corresponds to the path. ",
    "remarks": "Call ILFree to release the ITEMIDLIST when you are finished with it. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "ILCreateFromPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszPath",
        "description": "Type: PCTSTR A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines whether a specified ITEMIDLIST structure is the child of another ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE Returns a pointer to the child's simple ITEMIDLIST structure if pidlChild is a child of pidlParent. The returned structure consists of pidlChild, minus the SHITEMID structures that make up pidlParent. Returns NULL if pidlChild is not a child of pidlParent. ",
    "remarks": "",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILFindChild",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to the parent ITEMIDLIST structure."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlChild",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to the child ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUITEMID_CHILD A pointer to the last SHITEMID structure in pidl. ",
    "remarks": "This function does not clone the last item, so you do not have to call ILFree to release the returned pointer. ",
    "return_type": "PUITEMID_CHILD",
    "category": "Windows Shell",
    "name": "ILFindLastID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to an ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees an ITEMIDLIST structure allocated by the Shell.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "ILFree is often used with ITEMIDLIST structures allocated by one of the other IL functions, but it can be used to free any such structure returned by the Shell\u00e2\u0080\u0094for example, the ITEMIDLIST structure returned by SHBrowseForFolder or used in a call to SHGetFolderLocation. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "ILFree",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be freed. This parameter can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE Returns a pointer to the SHITEMID structure that follows the one specified by pidl. Returns NULL if pidl points to the last SHITEMID structure. ",
    "remarks": "",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILGetNext",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns the size, in bytes, of an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: UINT The size of the ITEMIDLIST structure specified by pidl, in bytes. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "ILGetSize",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to an ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies whether a constant ITEMIDLIST is aligned on a pointer boundary, which is a DWORD on 32-bit architectures and a QWORD on 64-bit architectures.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if aligned; otherwise, FALSE. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsAligned",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant PIDL relative to a parent folder that is being checked for alignment."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies whether a pointer to an item identifier list (PIDL) is a child PIDL, which is a PIDL with exactly one SHITEMID.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the given PIDL is a child PIDL; otherwise, FALSE. ",
    "remarks": "This function does not guarantee that the PIDL is non-NULL or non-empty. For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsChild",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL that is being checked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies whether an ITEMIDLIST structure is empty.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if the pidl parameter is NULL or the ITEMIDLIST structure pointed to by pidl is empty; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsEmpty",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUID_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUID_RELATIVE A pointer to the ITEMIDLIST structure to be checked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Tests whether two ITEMIDLIST structures are equal in a binary comparison.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the two structures are equal, FALSE otherwise. ",
    "remarks": "ILIsEqual performs a binary comparison of the item data. It is possible for two ITEMIDLIST structures to differ at the binary level while referring to the same item. IShellFolder::CompareIDs should be used to perform a non-binary comparison. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsEqual",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl1",
        "description": "Type: PCIDLIST_ABSOLUTE The first ITEMIDLIST structure."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl2",
        "description": "Type: PCIDLIST_ABSOLUTE The second ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if pidl1 is a parent of pidl2. If fImmediate is set to TRUE, the function only returns TRUE if pidl1 is the immediate parent of pidl2. Otherwise, the function returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsParent",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl1",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) structure that specifies the parent. This must be an absolute PIDL."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl2",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) structure that specifies the child. This must be an absolute PIDL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fImmediate",
        "description": "Type: BOOL A Boolean value that is set to TRUE to test for immediate parents of pidl2, or FALSE to test for any parents of pidl2."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PCUIDLIST_RELATIVE When this function returns, contains one of three results: If pidl is valid and not the last SHITEMID in the ITEMIDLIST, then it contains a pointer to the next ITEMIDLIST structure. If the last ITEMIDLIST structure is passed, it contains NULL, which signals the end of the PIDL. For other values of pidl, the return value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. To verify if the return value is NULL, use ILIsEmpty. ",
    "return_type": "PCUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILNext(PCUIDLIST_RELATIVE)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL for which the next SHITEMID structure is being retrieved."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE When this function returns, contains one of three results: If pidl is valid and not the last SHITEMID in the ITEMIDLIST, then it contains a pointer to the next ITEMIDLIST structure. If the last ITEMIDLIST structure is passed, it contains NULL, which signals the end of the PIDL. For other values of pidl, the return value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. To verify if the return value is NULL, use ILIsEmpty. ",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILNext(PUIDLIST_RELATIVE)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PUIDLIST_RELATIVE An unaligned, relative PIDL for which the next SHITEMID structure is being retrieved."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the last SHITEMID structure from an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILRemoveLastID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_opt_",
        "type": "PUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Saves an ITEMIDLIST structure to a stream.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or a COM error value otherwise. ",
    "remarks": "The stream must be opened for writing, or ILSaveToStream returns an error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ILSaveToStream",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream *",
        "name": "pstm",
        "description": "Type: IStream * A pointer to the IStream interface where the ITEMIDLIST is saved."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be saved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Skips a given number of bytes in a constant, unaligned, relative ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PCUIDLIST_RELATIVE When this function returns, if pidl and cb are valid, contains a constant pointer to the ITEMIDLIST structure that results after the skip. Otherwise, the value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "PCUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILSkip(PCUIDLIST_RELATIVE, UINT)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL in which bytes are to be skipped."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The number of bytes to skip."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Skips a given number of bytes in an unaligned, relative ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE When this function returns, if pidl and cb are valid, contains a pointer to the ITEMIDLIST structure that results after the skip. Otherwise, the value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILSkip(PUIDLIST_RELATIVE, UINT)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PUIDLIST_RELATIVE An unaligned, relative PIDL in which bytes are to be skipped."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The number of bytes to skip."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the system is connected to the Internet.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: BOOL Returns TRUE if the local system is not currently connected to the Internet. Returns FALSE if the local system is connected to the Internet or if no attempt has yet been made to connect to the Internet. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "InetIsOffline",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The input flags for the function. This must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Initializes the network address control window class.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL TRUE if the initialization succeeded; or FALSE otherwise. ",
    "remarks": "The network address control looks like an edit control and offers the additional functionality of network address verification. The control uses a balloon tip to display error messages. This function initializes class WC_NETADDRESS. If this function returns TRUE, the control can be created. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "InitNetworkAddressControl",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Loads the specified user's profile. The profile can be a  local user profile or a  roaming user profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. The function fails and returns ERROR_INVALID_PARAMETER if the dwSize member of the structure at lpProfileInfo is not set to sizeof(PROFILEINFO) or if the lpUserName member is NULL. ",
    "remarks": "When a user logs on interactively, the system automatically loads the user's profile. If a service or an application impersonates a user, the system does not load the user's profile. Therefore, the service or application should load the user's profile with LoadUserProfile. Services and applications that call LoadUserProfile should check to see if the user has a roaming profile. If the user has a roaming profile, specify its path as the lpProfilePath member of  PROFILEINFO. To retrieve the user's roaming profile path, you can call the  NetUserGetInfo function, specifying information level 3 or 4. Upon successful return, the hProfile member of PROFILEINFO is a registry key handle opened to the root of the user's hive. It has been opened with full access (KEY_ALL_ACCESS). If a service that is impersonating a user needs to read or write to the user's registry file, use this handle instead of HKEY_CURRENT_USER. Do not close the hProfile handle. Instead, pass it to the  UnloadUserProfile function. This function closes the handle. You should ensure that all handles to keys in the user's registry hive are closed. If you do not close all open registry handles, the user's profile fails to unload. For more information, see  Registry Key Security and Access Rights and Registry Hives. Note that it is your responsibility to load the user's registry hive into the HKEY_USERS registry key with the LoadUserProfile function before you call CreateProcessAsUser. This is because CreateProcessAsUser does not load the specified user's profile into HKEY_USERS. This means that access to information in the HKEY_CURRENT_USER registry key may not produce results consistent with a normal interactive logon. The calling process must have the SE_RESTORE_NAME and SE_BACKUP_NAME privileges. For more information, see Running with Special Privileges. Starting with Windows XP Service Pack 2 (SP2) and Windows Server 2003, the caller must be an administrator or the LocalSystem account. It is not sufficient for the caller to merely impersonate the administrator or LocalSystem account. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "LoadUserProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, which is returned by the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_QUERY, TOKEN_IMPERSONATE, and TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_Inout_",
        "type": "LPPROFILEINFO",
        "name": "lpProfileInfo",
        "description": "Type: LPPROFILEINFO Pointer to a PROFILEINFO structure. LoadUserProfile fails and returns ERROR_INVALID_PARAMETER if the dwSize member of the structure is not set to sizeof(PROFILEINFO) or if the lpUserName member is NULL. For more information, see Remarks."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Runs the unregistered MIME content type dialog box.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: HRESULT In supported systems, returns S_OK if the content type was successfully associated with the extension. In this case, the extension is associated as the default for the content type, and pszAppBuf points to the string that contains the path of the specified application. The function returns S_FALSE if nothing was registered. Otherwise, the return value will be one of the following:  ",
    "remarks": "This function does not validate the syntax of the input content type string at pcszMIMEContentType. A successful return value does not indicate that the specified MIME content type is valid. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "MIMEAssociationDialog",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window of any posted child windows."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInFlags",
        "description": "Type: DWORD A bit flag value that specifies if an association is to be registered. The bit flag is the value MIMEASSOCDLG_FL_REGISTER_ASSOC (0x0001). If this bit is set, the selected application is registered as the handler for the given MIME type. If this bit is clear, no association is registered. An application is registered only if this flag is set and the user indicates that a persistent association is to be made. Registration is impossible if the string at pcszFile does not contain an extension."
      },
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pcszFile",
        "description": "Type: PCTSTR The address of a null-terminated string that contains the name of the target file. This file must conform to the content type described by the pcszMIMEContentType parameter."
      },
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pcszMIMEContentType",
        "description": "Type: PCTSTR The address of a null-terminated string that contains the unregistered content type."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszAppBuf",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the path of the application specified by the user."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "ucAppBufLen",
        "description": "Type: UINT Size of pszAppBuf, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a unique path name from a template.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "This function generates a new unique file name based on the templates specified by pszTemplate, for drives that require the 8.3 format, and pszLongPlate for drives that support long file names. For example, if you specify \"My New Filename\" for pszLongPlate, PathMakeUniqueName returns names such as \"My New Filename (1)\", \"My New Filename (2)\", and so on. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathMakeUniqueName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszUniqueName",
        "description": "Type: PWSTR A buffer that receives a null-terminated Unicode string that contains the unique path name. It should be at least MAX_PATH characters in length."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The number of characters in the buffer pointed to by pszUniqueName."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszTemplate",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for drives that require file names with the 8.3 format. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszLongPlate",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for drives that support long file names. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszDir",
        "description": "Type: PCWSTR A null-terminated string that contains the directory in which the new file resides. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a unique filename based on an existing filename.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if a unique name was successfully created; otherwise FALSE. ",
    "remarks": "If the generated path exceeds MAX_PATH characters, this function may return a truncated string in PathYetAnotherMakeUniqueName. In that case, the function returns FALSE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathYetAnotherMakeUniqueName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszUniqueName",
        "description": "Type: PWSTR A string buffer that receives a null-terminated Unicode string that contains the fully qualified path of the unique file name. This buffer should be at least MAX_PATH characters long to avoid causing a buffer overrun."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the fully qualified path of folder that will contain the new file. If pszShort is set to NULL, this string must contain a full destination path, ending with the long file name that the new file name will be base on."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszShort",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the short file name that the unique name will be based on. Set this value to NULL to create a name based on the long file name."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszFileSpec",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the long file name that the unique name will be based on."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enables an app to register a callback function through which it can be notified that its library is going into or coming out of a suspended state. The app can use this information to perform any necessary operations, such as preserving state, that should be performed at that point.",
    "library": "Appnotify.lib",
    "min_server": "",
    "header": "Appnotify.h",
    "return_value": "A standard Win32 status code. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Windows Shell",
    "name": "RegisterAppStateChangeNotification",
    "is_callback": 0,
    "dll": "Twinapi.core.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PAPPSTATE_CHANGE_ROUTINE",
        "name": "Routine",
        "description": "A pointer to a callback function that is called when the app enters or leaves the suspended state. See PAPPSTATE_CHANGE_ROUTINE for more detail on this function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "Context",
        "description": "App-specific context information that the app uses when going into or out of a suspended state. This is commonly a \"this\" pointer."
      },
      {
        "in_out": "_Out_",
        "type": "PAPPSTATE_REGISTRATION",
        "name": "*Registration",
        "description": "When this function returns successfully, this parameter receives the address of a pointer to a value that can be used to identify the registration. Store this value to use with UnregisterAppStateChangeNotification."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Registers any nonstandard window classes required by a screen saver's configuration dialog box.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "The RegisterDialogClasses function should not be exported. It is called by routines defined in the Scrnsave.lib file. If a screen saver does not register any special window classes for the configuration dialog box, the RegisterDialogClasses function must return TRUE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "RegisterDialogClasses",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HANDLE",
        "name": "hInst",
        "description": "Type: HANDLE An identifier of an instance of the module registering the window classes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Registers for an event that is triggered when the scale has possibly changed. This function replaces RegisterScaleChangeNotifications.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The event is raised whenever something that can affect scale changes, but just because the scale can be affected doesn't mean that it has been. Callers can cache the scale factor to verify that the monitor's scale actually has changed. The event handle will be duplicated, so callers can close their handle at any time. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "RegisterScaleChangeEvent",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEvent",
        "description": "Handle of the event to register for scale change notifications."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD_PTR",
        "name": "*pdwCookie",
        "description": "When this function returns successfully, this value receives the address of a pointer to a cookie that can be used later to unregister for the scale change notifications through UnregisterScaleChangeEvent."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Registers a window to receive callbacks when scaling information changes.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "Type: STDAPI If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This message specified by uMsgNotify is posted to the registered window through PostMessage. The wParam of the message can contain a combination of SCALE_CHANGE_FLAGS that describe  the change that occurred. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "RegisterScaleChangeNotifications",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DISPLAY_DEVICE_TYPE",
        "name": "displayDevice",
        "description": "Type: DISPLAY_DEVICE_TYPE The enum value that indicates which display device to receive notifications about."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndNotify",
        "description": "Type: HWND The handle of the window that will receive the notifications."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uMsgNotify",
        "description": "Type: UINT An application-defined message that is passed to the window specified by hwndNotify when scaling information changes.  Typically, this should be set to WM_APP+x, where x is an integer value."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD",
        "name": "*pdwCookie",
        "description": "Type: DWORD* Pointer to a value that, when this function returns successfully, receives a registration token. This token is used to revoke notifications by calling RevokeScaleChangeNotifications."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Removes a subclass callback from a window.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL TRUE if the subclass callback was successfully removed; otherwise, FALSE. ",
    "remarks": "Subclass callbacks are identified by their combination of the callback address and the subclass ID defined by the calling process. The SUBCLASS module defines helper functions that are used to subclass windows. The code maintains a single property on the subclassed window and dispatches various subclass callbacks to its clients as required. The client is provided reference data and a default processing API. No reference counting is performed for the callback; it may repeatedly call SetWindowSubclass to alter the value of its reference data element. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "RemoveWindowSubclass",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.8 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The handle of the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "SUBCLASSPROC",
        "name": "pfnSubclass",
        "description": "Type: SUBCLASSPROC A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see SUBCLASSPROC."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIdSubclass",
        "description": "Type: UINT_PTR The UINT_PTR subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions of Windows this is a 64-bit value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Revokes the registration of a window, preventing it from receiving callbacks when scaling information changes.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "Type: STDAPI If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "RevokeScaleChangeNotifications",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DISPLAY_DEVICE_TYPE",
        "name": "displayDevice",
        "description": "Type: DISPLAY_DEVICE_TYPE The enum value that indicates which display device to receive notifications about."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCookie",
        "description": "Type: DWORD The registration token returned by a previous call to RegisterScaleChangeNotifications."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters for the scale change event registered through RegisterScaleChangeEvent. This function replaces RevokeScaleChangeNotifications.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "UnregisterScaleChangeEvent",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwCookie",
        "description": "A pointer to the cookie retrieved in the call to RegisterScaleChangeEvent."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Receives messages sent to a screen saver's configuration dialog box. A screen saver that allows user configuration must define this function.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: BOOL If the function successfully processes the message, it should return TRUE. If not, it should return FALSE, except in response to a WM_INITDIALOG message. In response to a WM_INITDIALOG message, ScreenSaverConfigureDialog should return FALSE if it calls the SetFocus function to set the keyboard focus to one of the controls in the dialog box. Otherwise, the function should return TRUE, in which case the system sets the keyboard focus to the first control in the dialog box that can be given the focus. ",
    "remarks": "The dialog box template for the configuration dialog box must have the DLG_SCRNSAVECONFIGURE identifier. The dialog box procedure is used only if the application specifies the default window class (WC_DIALOG) for the dialog box. The application uses the default class if no explicit class is given in the dialog box template. Although the dialog box procedure is similar to a window procedure, it must not call the DefWindowProc function to process unwanted messages. Unwanted messages are processed internally by the default dialog box procedure. The ScreenSaverConfigureDialog function must be exported by including it in the EXPORTS statement in the application's module-definition (.def) file. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ScreenSaverConfigureDialog",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hDlg",
        "description": "Type: HWND The identifier of the configuration dialog box."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "message",
        "description": "Type: UINT A message that was sent to the screen saver's configuration dialog box."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Receives messages sent to the specified screen saver window.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: LONG The return value is the result of the message processing and depends on the message sent. ",
    "remarks": "A screen saver's ScreenSaverProc window procedure should use the DefScreenSaverProc function instead of the DefWindowProc function to provide default message processing. The DefScreenSaverProc function passes any messages that do not affect screen saver operations to DefWindowProc. The ScreenSaverProc function must be exported by including it in the EXPORTS statement in the application's module-definition (.def) file. ",
    "return_type": "LONG",
    "category": "Windows Shell",
    "name": "ScreenSaverProc",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND An identifier of the window."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "message",
        "description": "Type: UINT A message sent to the screen saver window."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Associates an app window other than the primary foreground window with an app's contracts. Use this function if you are a developer writing a Windows Store app in native C++.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This is an inline function, with the source code included in the header file. It is not included in a .lib or .dll file. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SetContractDelegateWindow",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndSource",
        "description": "Type: HWND The handle of the app window normally associated with its contracts."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndDelegate",
        "description": "Type: HWND The handle of another of the app's windows that will act as the contract delegate for hwndSource. Set this value to NULL to remove the delegate connection."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the current process to the taskbar. This identifier allows an application to group its associated processes and windows under a single taskbar button.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This method must be called during an application's initial startup routine before the application presents any UI or makes any manipulation of its Jump Lists. This includes any call to SHAddToRecentDocs. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SetCurrentProcessExplicitAppUserModelID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "AppID",
        "description": "Type: PCWSTR Pointer to the AppUserModelID to assign to the current process."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Associates a Help context identifier with a menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "All items in the menu share this identifier. Help context identifiers can't be attached to individual menu items. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SetMenuContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu with which to associate the Help context identifier."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwContextHelpId",
        "description": "Type: DWORD The help context identifier."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Associates a Help context identifier with the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "If a child window does not have a Help context identifier, it inherits the identifier of its parent window. Likewise, if an owned window does not have a Help context identifier, it inherits the identifier of its owner window. This inheritance of Help context identifiers allows an application to set just one identifier for a dialog box and all of its controls. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SetWindowContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window with which to associate the Help context identifier."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwContextHelpId",
        "description": "Type: DWORD The Help context identifier."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Installs or updates a window subclass callback.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL TRUE if the subclass callback was successfully installed; otherwise, FALSE. ",
    "remarks": "Subclass callbacks are identified by the combination of the callback address and the caller-defined subclass ID. If the callback address and ID pair have not yet been installed, then this function installs the subclass. If the pair has already been installed, then this function just updates the reference data. Each callback can store a single DWORD of reference data, which is passed to the callback function when it is called to filter messages. No reference counting is performed for the callback; it may repeatedly call SetWindowSubclass to alter the value of its reference data element. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SetWindowSubclass",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.8 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The handle of the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "SUBCLASSPROC",
        "name": "pfnSubclass",
        "description": "Type: SUBCLASSPROC A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see SUBCLASSPROC."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIdSubclass",
        "description": "Type: UINT_PTR The subclass ID. This ID together with the subclass procedure uniquely identify a subclass. To remove a subclass, pass the subclass procedure and this value to the RemoveWindowSubclass function. This value is passed to the subclass procedure in the uIdSubclass parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwRefData",
        "description": "Type: DWORD_PTR DWORD_PTR to reference data. The meaning of this value is determined by the calling application. This value is passed to the subclass procedure in the dwRefData parameter. A different dwRefData is associated with each combination of window handle, subclass procedure and uIdSubclass."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The usage statistics gathered through calls to this method are used to determine lists of items accessed most recently and most frequently. These lists are seen in the Start menu and, in Windows 7 and later, in an application's Jump List. When this method is called, it affects the following areas: Items represented by an IShellLink are not added to the Recent folder, although they are reflected in an application's Jump List. In some cases, notably when a user opens an item through Windows Explorer or uses the common file dialog to open, save, or create a file, the Shell calls SHAddToRecentDocs on behalf of the application. An application that has a custom UI for selecting items should call SHAddToRecentDocs explicitly to ensure accurate statistics. Duplicate calls are accounted for by the system so there is no risk of skewing the data by doing so. Executable (.exe) files are filtered from the recently used documents list in Windows XP and later versions. Although SHAddToRecentDocs will accept the path of an executable file, that file will not appear in the Recent Items list. Folders are also accepted by SHAddToRecentDocs, but appear only in the Jump List for the Windows Explorer taskbar button. Folders do not appear in any other application's Jump List. In certain cases, SHAddToRecentDocs attempts to register an application to handle a file type that it is not registered to handle. This occurs under these circumstances: This registration is done per-user. A set of requirements must be met for the registration to be accomplished successfully: In versions of Windows before Windows 7, a file type could set the FTA_NoRecentDocs flag to prevent that file type from being added to the Recent folder. This mechanism is also supported under Windows 7 and later. See File Types for more information. SHAddToRecentDocs tracks document usage statistics through the verbs that are invoked to access those documents. Verbs supplied by registered IContextMenu handlers are tracked, those items appear in My Recent Documents (Windows XP) and Recent Items (Windows Vista). In Windows 7, the parent folders of the documents appear in the Jump List for the Windows Explorer taskbar button. However, the documents accessed through those IContextMenu verbs do not appear in application Jump Lists. For those items to appear in an application's Jump List, an application must call SHAddToRecentDocs explicitly. Prior to Windows 7, only the open verb resulted in a call to SHAddToRecentDocs. In Windows 7 and later, other verbs can also generate usage statistics. This information is used to make a Jump List's destinations more complete and accurate. However, some classes of file type association registrations or individual IContextMenu implementations are not appropriate for this sort of tracking. The point of usage tracking is to generate a list of items that the user is likely to want to access again. If a particular verb\u00e2\u0080\u0094delete, for instance\u00e2\u0080\u0094is inherently invoked on an item that the user will not access again, or is a secondary action such as a virus scan on a file, that verb is not appropriate for tracking. File type classes should remove themselves from this tracking through the registry entry NoRecentDocs. NoRecentDocs is of type REG_SZ and has no associated data. Its presence is all that is required to prevent the call to SHAddToRecentDocs. For example, context menu extensions and static verbs registered under HKEY_CLASSES_ROOT in classes such as \"*\", \"AllFileSystemObjects\", or \"Folder\" should not be tracked. In cases such as these, the NoRecentDocs entry is added to the root of the class key as shown here to suppress tracking of documents launched through any verb or extension registered to that class:  The NoRecentDocs entry is assigned by default to the *, AllFileSystemObjects, Folder, Directory, and DesktopBackground class subkeys. Individual IContextMenu implementations can opt out of tracking by adding a NoRecentDocs subkey to its Component Object Model (COM) object's registration, in its shellex subkey, as shown here:  This subkey is not present by default on any IContextMenu implementation. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHAddToRecentDocs",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCVOID",
        "name": "pv",
        "description": "Type: LPCVOID A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the following forms:                                 A null-terminated string that contains the path and file name of the item. A PIDL that identifies the item's file object. Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information. Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.  Set this parameter to NULL to clear all usage data on all items."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sends an appbar message to the system.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: UINT_PTR This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar message sent. Links to those documents are given in the See Also section. ",
    "remarks": "",
    "return_type": "UINT_PTR",
    "category": "Windows Shell",
    "name": "SHAppBarMessage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMessage",
        "description": "Type: DWORD Appbar message value to send. ..."
      },
      {
        "in_out": "_Inout_",
        "type": "PAPPBARDATA",
        "name": "pData",
        "description": "Type: PAPPBARDATA A pointer to an APPBARDATA structure. The content of the structure on entry and on exit depends on the value set in the dwMessage parameter. See the individual message pages for specifics."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Returns an enumeration object for a specified set of file name extension handlers.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHAssocEnumHandlers",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExtra",
        "description": "Type: PCWSTR A pointer to a null-terminated buffer that contains a single file type extension, for instance \".jpg\". Only handlers associated with the given extension are enumerated. If this value is NULL, all handlers for all extensions are enumerated."
      },
      {
        "in_out": "_In_",
        "type": "ASSOC_FILTER",
        "name": "afFilter",
        "description": "Type: ASSOC_FILTER Specifies the enumeration handler filter applied to the full list of handlers that results from the value given in pszExtra. One of the following values.  ASSOC_FILTER_NONE   Return all handlers.  ASSOC_FILTER_RECOMMENDED   Return only recommended handlers. A handler sets its recommended status in the registry when it is installed. An initial status of non-recommended can later be promoted to recommended as a result of user action."
      },
      {
        "in_out": "_Out_",
        "type": "IEnumAssocHandlers",
        "name": "**ppEnumHandler",
        "description": "Type: IEnumAssocHandlers** When this method returns, contains the address of a pointer to an IEnumAssocHandlers object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Gets an enumeration interface that provides access to handlers associated with a given protocol.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is recommended that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and enumHandlers parameters. This macro provides the correct IID based on the interface pointed to by the value in enumHandlers, which eliminates the possibility of a coding error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHAssocEnumHandlersForProtocolByApplication",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "protocol",
        "description": "Type: PCWSTR Pointer to a string that specifies the protocol."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through enumHandlers, typically IID_IEnumAssocHandlers."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**enumHandlers",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IEnumAssocHandlers."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToFolderIDListParent",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder",
        "name": "*psfRoot",
        "description": "Type: IShellFolder* A pointer to a Shell folder object. If psfRoot is NULL, indicates that the IDList passed is relative to the desktop."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A PIDL to bind to, relative to psfRoot. If psfRoot is NULL, this is an absolute IDList relative to the desktop folder."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid. This is typically IShellFolder or IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCUITEMID_CHILD",
        "name": "*ppidlLast",
        "description": "Type: PCUITEMID_CHILD* A pointer to the last ID of the pidl parameter, and is a child ID relative to the parent folder returned in ppv. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToFolderIDListParentEx",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder",
        "name": "*psfRoot",
        "description": "Type: IShellFolder* A pointer to a Shell folder object. If psfRoot is NULL, indicates that the IDList passed is relative to the desktop."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A PIDL to bind to, relative to psfRoot. If psfRoot is NULL, this is an absolute IDList relative to the desktop folder."
      },
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx",
        "name": "*ppbc",
        "description": "Type: IBindCtx* A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it to NULL, which is equivalent to calling the SHBindToFolderIDListParent function. Because support for pbc is optional for folder object implementations, some folders may not support the use of bind contexts."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid. This is typically IShellFolder or IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCUITEMID_CHILD",
        "name": "*ppidlLast",
        "description": "Type: PCUITEMID_CHILD* A pointer to the last ID of the pidl parameter, and is a child ID relative to the parent folder returned in ppv. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IShellFolder",
        "name": "*psf",
        "description": "Type: IShellFolder* A pointer to IShellFolder. This parameter can be NULL.   If psf is NULL,  this indicates  parameter pidl is relative to the desktop. In this case, pidl must specify an absolute ITEMIDLIST."
      },
      {
        "in_out": "",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to a constant ITEMIDLIST to bind to that is relative to psf. If psf is NULL, this is an absolute ITEMIDLIST relative to the desktop folder."
      },
      {
        "in_out": "_In_",
        "type": "IBindCtx",
        "name": "*pbc",
        "description": "Type: IBindCtx* A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it to NULL. Because support for pbc is optional for folder object implementations, some folders may not support the use of bind contexts."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Identifier of the interface to return."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer as specified in riid to the bound object. If an error occurs, contains a NULL pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. The following code fragment uses SHBindToParent to retrieve the display name from an item's PIDL. The StrRetToBuf function is used to convert the STRRET structure returned by IShellFolder::GetDisplayNameOf into a string. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToParent",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE The item's PIDL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID The REFIID of one of the interfaces exposed by the item's parent object."
      },
      {
        "in_out": "_Out_",
        "type": "VOID",
        "name": "**ppv",
        "description": "Type: VOID** A pointer to the interface specified by riid. You must release the object when you are finished."
      },
      {
        "in_out": "_Out_",
        "type": "PCUITEMID_CHILD",
        "name": "*ppidlLast",
        "description": "Type: PCUITEMID_CHILD* The item's PIDL relative to the parent folder. This PIDL can be used with many of the methods supported by the parent folder's interfaces. If you set ppidlLast to NULL, the PIDL is not returned.  Note  SHBindToParent does not allocate a new PIDL; it simply receives a pointer through this parameter. Therefore, you are not responsible for freeing this resource."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Displays a dialog box that enables the user to select a Shell folder.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the Cancel button in the dialog box, the return value is NULL. It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section. ",
    "remarks": "For Windows Vista or later, it is recommended that you use IFileDialog with the FOS_PICKFOLDERS option rather than the SHBrowseForFolder function. This uses the Open Files dialog in pick folders mode and is the preferred implementation. You must initialize Component Object Model (COM) before you call SHBrowseForFolder. If you initialize COM using CoInitializeEx, you must set the COINIT_APARTMENTTHREADED flag in its dwCoInit parameter. You can also use CoInitialize or OleInitialize, which always use apartment threading. If you require drag-and-drop functionality, OleInitialize is recommended because it initializes the required OLE as well as COM. It is the responsibility of the calling application to call CoTaskMemFree to free the IDList returned by SHBrowseForFolder when it is no longer needed. There are two styles of dialog box available. The older style is displayed by default and is not resizable. The newer style provides a number of additional features, including drag-and-drop capability within the dialog box, reordering, deletion, shortcut menus, the ability to create new folders, and other shortcut menu commands. Initially, it is larger than the older dialog box, but the user can resize it. To specify a dialog box using the newer style, set the BIF_USENEWUI flag in the ulFlags member of the BROWSEINFO structure. If you implement a callback function, specified in the lpfn member of the BROWSEINFO structure, you receive a handle to the dialog box. One use of this window handle is to modify the layout or contents of the dialog box. Because it is not resizable, modifying the older style dialog box is relatively straightforward. Modifying the newer style dialog box is much more difficult, and not recommended. Not only does it have a different size and layout than the old style, but its dimensions and the positions of its controls change every time it is resized by the user. If the BIF_RETURNONLYFSDIRS flag is set in the ulFlags member of the BROWSEINFO structure, the OK button remains enabled for \"\\\\server\" items, as well as \"\\\\server\\share\" and directory items. However, if the user selects a \"\\\\server\" item, passing the PIDL returned by SHBrowseForFolder to SHGetPathFromIDList fails. As of Windows XP, SHBrowseForFolder supports custom filtering on the contents of the dialog box. To create a custom filter, follow these steps. If SHBrowseForFolder returns a PIDL to a shortcut, sending that PIDL to SHGetPathFromIDList returns the path of the shortcut itself rather than the path of its target. The path to the shortcut's target can be obtained by using the IShellLink interface as shown in this example. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "SHBrowseForFolder",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPBROWSEINFO",
        "name": "lpbi",
        "description": "Type: LPBROWSEINFO A pointer to a BROWSEINFO structure that contains information used to display the dialog box."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Locks the shared memory associated with a Shell change notification event.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HANDLE Returns a handle (HLOCK) to the locked memory. Pass this value to SHChangeNotification_Unlock when finished. ",
    "remarks": "",
    "return_type": "HANDLE",
    "category": "Windows Shell",
    "name": "SHChangeNotification_Lock",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hChange",
        "description": "Type: HANDLE A handle to a window received as a wParam in the specified Shell change notification message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwProcId",
        "description": "Type: DWORD The process ID (lParam in the message callback)."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PIDLIST_ABSOLUTE",
        "name": "**pppidl",
        "description": "Type: PIDLIST_ABSOLUTE** The address of a pointer to a PIDLIST_ABSOLUTE that, when this function returns successfully, receives the list of affected PIDLs."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LONG",
        "name": "*plEvent",
        "description": "Type: LONG* A pointer to a LONG value that, when this function returns successfully, receives the Shell change notification ID of the event that took place."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unlocks shared memory for a change notification.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE on success; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHChangeNotification_Unlock",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hLock",
        "description": "Type: HANDLE A handle to the memory lock. This is the handle returned by SHChangeNotification_Lock when it locked the memory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Applications that register new handlers of any type must call SHChangeNotify with the SHCNE_ASSOCCHANGED flag to instruct the Shell to invalidate the icon and thumbnail cache. This will also load new icon and thumbnail handlers that have been registered. Note, however, that icon overlay handlers are not reloaded. The strings pointed to by dwItem1 and dwItem2 can be either ANSI or Unicode. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHChangeNotify",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LONG",
        "name": "wEventId",
        "description": "Type: LONG Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events. This parameter can be one or more of the following values:   SHCNE_ALLEVENTS   All events have occurred.  SHCNE_ASSOCCHANGED   A file type association has changed. SHCNF_IDLIST must be specified in the uFlags parameter. dwItem1 and dwItem2 are not used and must be NULL. This event should also be sent for registered protocols.  SHCNE_ATTRIBUTES   The attributes of an item or folder have changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item or folder that has changed. dwItem2 is not used and should be NULL.  SHCNE_CREATE   A nonfolder item has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was created. dwItem2 is not used and should be NULL.  SHCNE_DELETE   A nonfolder item has been deleted. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was deleted. dwItem2 is not used and should be NULL.  SHCNE_DRIVEADD   A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was added. dwItem2 is not used and should be NULL.  SHCNE_DRIVEADDGUI   Windows XP and later: Not used.  SHCNE_DRIVEREMOVED   A drive has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was removed. dwItem2 is not used and should be NULL.  SHCNE_EXTENDED_EVENT   Not currently used.  SHCNE_FREESPACE   The amount of free space on a drive has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive on which the free space changed. dwItem2 is not used and should be NULL.  SHCNE_MEDIAINSERTED   Storage media has been inserted into a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that contains the new media. dwItem2 is not used and should be NULL.  SHCNE_MEDIAREMOVED   Storage media has been removed from a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive from which the media was removed. dwItem2 is not used and should be NULL.  SHCNE_MKDIR   A folder has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was created. dwItem2 is not used and should be NULL.  SHCNE_NETSHARE   A folder on the local computer is being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that is being shared. dwItem2 is not used and should be NULL.  SHCNE_NETUNSHARE   A folder on the local computer is no longer being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that is no longer being shared. dwItem2 is not used and should be NULL.  SHCNE_RENAMEFOLDER   The name of a folder has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or name of the folder. dwItem2 contains the new PIDL or name of the folder.  SHCNE_RENAMEITEM   The name of a nonfolder item has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or name of the item. dwItem2 contains the new PIDL or name of the item.  SHCNE_RMDIR   A folder has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was removed. dwItem2 is not used and should be NULL.  SHCNE_SERVERDISCONNECT   The computer has disconnected from a server. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the server from which the computer was disconnected. dwItem2 is not used and should be NULL.  SHCNE_UPDATEDIR   The contents of an existing folder have changed, but the folder still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that has changed. dwItem2 is not used and should be NULL. If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or SHCNE_RENAMEFOLDER, respectively.  SHCNE_UPDATEIMAGE   An image in the system image list has changed. SHCNF_DWORD must be specified in uFlags. dwItem2 contains the index in the system image list that has changed. dwItem1 is not used and should be NULL.  SHCNE_UPDATEITEM   An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that has changed. dwItem2 is not used and should be NULL. If a nonfolder item has been created, deleted, or renamed, use SHCNE_CREATE, SHCNE_DELETE, or SHCNE_RENAMEITEM, respectively, instead.  SHCNE_DISKEVENTS   Specifies a combination of all of the disk event identifiers.  SHCNE_GLOBALEVENTS   Specifies a combination of all of the global event identifiers.  SHCNE_INTERRUPT   The specified event occurred as a result of a system interrupt. As this value modifies other event values, it cannot be used alone."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Flags that, when combined bitwise with SHCNF_TYPE, indicate the meaning of the dwItem1 and dwItem2 parameters. The uFlags parameter must be one of the following values.  SHCNF_DWORD   The dwItem1 and dwItem2 parameters are DWORD values.  SHCNF_IDLIST   dwItem1 and dwItem2 are the addresses of ITEMIDLIST structures that represent the item(s) affected by the change. Each ITEMIDLIST must be relative to the desktop folder.  SHCNF_PATH   dwItem1 and dwItem2 are the addresses of null-terminated strings of maximum length MAX_PATH that contain the full path names of the items affected by the change.  SHCNF_PRINTER   dwItem1 and dwItem2 are the addresses of null-terminated strings that represent the friendly names of the printer(s) affected by the change.  SHCNF_FLUSH   The function should not return until the notification has been delivered to all affected components. As this flag modifies other data-type flags, it cannot be used by itself.  SHCNF_FLUSHNOWAIT   The function should begin delivering notifications to all affected components but should return as soon as the notification process has begun. As this flag modifies other data-type flags, it cannot by used by itself. This flag includes SHCNF_FLUSH.  SHCNF_NOTIFYRECURSIVE   Notify clients registered for all children."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCVOID",
        "name": "dwItem1",
        "description": "Type: LPCVOID Optional. First event-dependent value."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCVOID",
        "name": "dwItem2",
        "description": "Type: LPCVOID Optional. Second event-dependent value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters the client's window process from receiving SHChangeNotify messages.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the specified client was found and removed; otherwise FALSE. ",
    "remarks": "See the Change Notify Watcher Sample in the Windows Software Development Kit (SDK) for a full example that demonstrates the use of this function. The NTSHChangeNotifyDeregister function, which is no longer available for use as of Windows Vista, was equivalent to SHChangeNotifyDeregister. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHChangeNotifyDeregister",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "ULONG",
        "name": "ulID",
        "description": "Type: ULONG A value of type ULONG that specifies the registration ID returned by SHChangeNotifyRegister."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: ULONG Returns a positive integer registration ID. Returns 0 if out of memory or in response to invalid parameters. ",
    "remarks": "See the Change Notify Watcher Sample in the Windows Software Development Kit (SDK) for a full example that demonstrates the use of this function. When a change notification event is raised, the message indicated by wMsg is delivered to the window specified by the hwnd parameter. When a relevant file system event takes place and the hwnd parameter is not NULL, then the message indicated by wMsg is posted to the specified window. Otherwise, if the pshcne parameter is not NULL, then that notification entry is used. For performance reasons, multiple notifications can be combined into a single notification. For example, if a large number of SHCNE_UPDATEITEM notifications are generated for files in the same folder, they can be joined into a single SHCNE_UPDATEDIR notification. The NTSHChangeNotifyRegister function, which is no longer available as of Windows Vista, was equivalent to SHChangeNotifyRegister with the SHCNRF_NewDelivery flag. ",
    "return_type": "ULONG",
    "category": "Windows Shell",
    "name": "SHChangeNotifyRegister",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window that receives the change or notification messages."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "fSources",
        "description": "Type: int One or more of the following values that indicate the type of events for which to receive notifications. ..."
      },
      {
        "in_out": "",
        "type": "LONG",
        "name": "fEvents",
        "description": "Type: LONG Change notification events for which to receive notification. See the SHCNE flags listed in SHChangeNotify for possible values."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "wMsg",
        "description": "Type: UINT Message to be posted to the window procedure."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cEntries",
        "description": "Type: int Number of entries in the pshcne array."
      },
      {
        "in_out": "_In_",
        "type": "SHChangeNotifyEntry",
        "name": "*pshcne",
        "description": "Type: const SHChangeNotifyEntry* Array of SHChangeNotifyEntry structures that contain the notifications. This array should always be set to one when calling SHChangeNotifyRegister or SHChangeNotifyDeregister will not work properly."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enables asynchronous register and deregister of a thread.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHChangeNotifyRegisterThread",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "SCNRT_STATUS",
        "name": "status",
        "description": "Type: SCNRT_STATUS Indicates whether the function is being used to register or deregister the thread. One of the values of SCNRT_STATUS."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateAssociationRegistration",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the requested interface."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this function returns, contains the address of a pointer to the IApplicationAssociationRegistration object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Creates a data object in a parent folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is typically called when implementing method IShellFolder::GetUIObjectOf. When an interface pointer of interface ID  IID_IDataObject is requested (using parameter riid), the implementer can return the interface pointer on the object created with SHCreateDataObject in response. This function supports the CFSTR_SHELLIDLIST (also known as HIDA) clipboard format and also has generic support for arbitrary clipboard formats through IDataObject::SetData. For more information on clipboard formats, see Shell Clipboard Formats. The new data object is intended to be used in operations such as drag-and-drop, in which the data is stored in the clipboard with a given format. We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) of the parent folder that contains the data object."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of file objects or subfolders specified in the apidl parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "apidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY An array of pointers to constant ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to the parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero."
      },
      {
        "in_out": "_In_opt_",
        "type": "IDataObject",
        "name": "*pdtInner",
        "description": "Type: IDataObject* A pointer to interface IDataObject. This parameter can be NULL. Specify pdtInner only if the data object created needs to support additional FORMATETC  clipboard formats beyond the default formats it is assigned at creation.  Alternatively, provide support for populating the created data object using non-default clipboard formats by calling method IDataObject::SetData and specifying the format in the FORMATETC structure passed in parameter pFormatetc."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv. This must be IID_IDataObject."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns successfully, contains the IDataObject interface pointer requested in riid."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an object that represents the Shell's default context menu implementation.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is typically used in the implementation of IShellFolder::GetUIObjectOf. GetUIObjectOf creates a context menu that merges IContextMenu handlers specified by the DEFCONTEXTMENU structure, and can optionally provide default context menu verb implementations such as open, explore, delete, and copy. The operation of this function is controlled by the input specified in the DEFCONTEXTMENU structure.The APICDefFolderMenu_Create2 is another way to construct the default context menu implementation. It is less expressive than SHCreateDefaultContextMenu but it exists in platforms prior to Windows Vista. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDefaultContextMenu",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DEFCONTEXTMENU",
        "name": "*pdcm",
        "description": "Type: const DEFCONTEXTMENU* A pointer to a constant DEFCONTEXTMENU structure."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the interface ID of the interface on which to base the object. This is typically the IID of IContextMenu, IContextMenu2, or IContextMenu3."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a standard icon extractor, whose defaults can be further configured via the IDefaultExtractIconInit interface.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The intended usage for this function is as follows: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDefaultExtractIcon",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** The address of IDefaultExtractIconInit interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a file operation that sets the default properties on the Shell item that have not already been set.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The list of properties to set a default value comes from the SetDefaultsFor registry entry under the ProgID for the file association of the item. The list is prefixed by prop: and contains the canonical names of the properties to set the default value, for example, prop:System.Author;System.Document.DateCreated. The possible properties for this list are System.Author, System.Document.DateCreated, and System.Photo.DateTaken. If the SetDefaultsFor entry does not exist on the ProgID, this function uses the default found on the SetDefaultsFor entry of HKEY_CLASSES_ROOT\\*. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDefaultPropertiesOp",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem",
        "name": "*psi",
        "description": "Type: IShellItem* A pointer to the source shell item. See IShellItem."
      },
      {
        "in_out": "_Out_",
        "type": "IFileOperation",
        "name": "**ppFileOp",
        "description": "Type: IFileOperation** The address of the IFileOperation interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object supports the IShellItem interface.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE The source PIDL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the requested interface."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid.  This will typically be IShellItem or          IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates and initializes a Shell item object from a parsing name.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemFromParsingName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a display name."
      },
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx",
        "name": "*pbc",
        "description": "Type: IBindCtx* Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed parameters are often specific to the data source and are documented by the data source owners. For example, the file system data source accepts the name being parsed (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context parameter.  STR_PARSE_PREFER_FOLDER_BROWSING can be passed to indicate that URLs are parsed using the file system data source when possible. Construct a bind context object using CreateBindCtx and populate the values using IBindCtx::RegisterObjectParam. See Bind Context String Keys for a complete list of these. See the Parsing With Parameters Sample for an example of the use of this parameter.  If no data is being passed to or received from the parsing function, this value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem or IID_IShellItem2."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellItem or IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates and initializes a Shell item object from a relative parsing name.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemFromRelativeName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem",
        "name": "*psiParent",
        "description": "Type: IShellItem* A pointer to the parent Shell item."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszName",
        "description": "Type: PCWSTR A pointer to a null-terminated, Unicode string that specifies a display name that is relative to the psiParent."
      },
      {
        "in_out": "_In_",
        "type": "IBindCtx",
        "name": "*pbc",
        "description": "Type: IBindCtx* A pointer to a bind context that controls the parsing operation. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to an interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid.  This will usually be IShellItem or          IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a Shell item object for a single file that exists inside a known folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemInKnownFolder",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "kfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwKFFlags",
        "description": "Type: DWORD Flags that specify special options in the object retrieval. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszItem",
        "description": "Type: PCWSTR A pointer to a null-terminated buffer that contains the file name of the new item as a Unicode string. This parameter can also be NULL. In this case, an IShellItem that represents the known folder itself is created."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface that represents the item, retrieved through ppv. This value is typically IID_IShellItem or IID_IShellItem2."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this function returns successfully, contains the interface pointer requested in riid. This is typically IShellItem or IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Create a Shell item, given a parent folder and a child item ID.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemWithParent",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE The IDList of the parent folder of the item being created; the IDList of psfParent. This parameter can be NULL, if psfParent is specified."
      },
      {
        "in_out": "_In_",
        "type": "IShellFolder",
        "name": "*psfParent",
        "description": "Type: IShellFolder* A pointer to IShellFolder interface that specifies the shell data source of the child item specified by the pidl.This parameter can be NULL, if pidlParent is specified."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A child item ID relative to its parent folder specified by psfParent or pidlParent."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to an interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppvItem",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid.  This will typically be IShellItem or          IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a new instance of the default Shell folder view object (DefView).",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateShellFolderView is recommended over SHCreateShellFolderViewEx because of the greater flexibility of its elements to participate in various scenarios, provide new functionality to the view, and interact with other objects. When dealing with several instances of IShellView, you might want to verify which is the default Shell folder view object. To do so, call QueryInterface on the object using the IID_CDefView IID. This call succeeds only when made on the default Shell folder view object. Data sources that use the default Shell folder view object must implement these interfaces: Optionally, they can also implement IPersistFolder3. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellFolderView",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SFV_CREATE",
        "name": "*pcsfv",
        "description": "Type: const SFV_CREATE* Pointer to a SFV_CREATE structure that describes the particulars used in creating this instance of the Shell folder view object."
      },
      {
        "in_out": "_Out_",
        "type": "IShellView",
        "name": "**ppsv",
        "description": "Type: IShellView** When this function returns successfully, contains an interface pointer to the new IShellView object. On failure, this value is NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a new instance of the default Shell folder view object. It is recommended that you use SHCreateShellFolderView rather than this function.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateShellFolderView is recommended over SHCreateShellFolderViewEx because of the greater flexibility of its elements to participate in various scenarios, provide new functionality to the view, and interact with other objects. When dealing with several instances of IShellView, you might want to verify which is the default Shell folder view object. To do so, call QueryInterface on the object using IID_CDefView. This call succeeds only on the default Shell folder view object. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellFolderViewEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CSFV",
        "name": "*pcsfv",
        "description": "Type: CSFV* Pointer to a structure that describes the details used in creating this instance of the Shell folder view object."
      },
      {
        "in_out": "_Out_",
        "type": "IShellView",
        "name": "**ppsv",
        "description": "Type: IShellView** The address of an IShellView interface pointer that, when this function returns successfully, points to the new view object. On failure, this value is NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an IShellItem object.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateShellItem creates an object that represents a Shell namespace item. The caller must provide parent information in pidlParent or psfParent; alternatively, the caller can provide an absolute IDList in the pidl parameter. There are three valid calling patterns for this function: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE A PIDL to the parent. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder",
        "name": "*psfParent",
        "description": "Type: IShellFolder* A pointer to the parent IShellFolder. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A PIDL to the requested item. If parent information is not included in pidlParent or psfParent, this must be an absolute PIDL."
      },
      {
        "in_out": "_Out_",
        "type": "IShellItem",
        "name": "**ppsi",
        "description": "Type: IShellItem** When this method returns, contains the interface pointer to the new IShellItem."
      }
    ],
    "min_client": "Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a Shell item array object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArray",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE The ID list of the parent folder of the items specified in ppidl. If psf is specified, this parameter can be NULL. If this pidlParent is not specified, it is computed from the psf parameter using IPersistFolder2."
      },
      {
        "in_out": "_In_",
        "type": "IShellFolder",
        "name": "*psf",
        "description": "Type: IShellFolder* The Shell data source object that is the parent of the child items specified in ppidl. If pidlParent is specified, this parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of elements in the array specified by ppidl."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "ppidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY The list of child item IDs for which the array is being created. This value can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IShellItemArray",
        "name": "**ppsiItemArray",
        "description": "Type: IShellItemArray** When this function returns, contains the address of an IShellItemArray interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a Shell item array object from a data object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is usefull for Shell extensions that implement IShellExtInit and are passed a data object to the IShellExtInit::Initialize method; for example, context menu handlers. This API lets you convert the data object into a Shell item that the handler can consume. It is recommend that handlers use a Shell item array rather than clipboard formats like CF_HDROP and CFSTR_SHELLIDLIST (also known as HIDA) as it leads to simpler code and allows some performance improvements. The resulting shell item array holds a reference to the source data object.  Therefore, that data object must remain valid for the lifetime of the shell item array.  Notably, the data objects passed to IDropTarget methods are no longer valid after the drop operation completes. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArrayFromDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDataObject",
        "name": "*pdo",
        "description": "Type: IDataObject* A pointer to IDataObject interface."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the desired interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IShellItemArray."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a Shell item array object from a list of ITEMIDLIST structures.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArrayFromIDLists",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of elements in the array."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE_ARRAY",
        "name": "rgpidl",
        "description": "Type: PCIDLIST_ABSOLUTE_ARRAY A list of cidl constant pointers to ITEMIDLIST structures."
      },
      {
        "in_out": "_Out_",
        "type": "IShellItemArray",
        "name": "**ppsiItemArray",
        "description": "Type: IShellItemArray** When this function returns, contains an IShellItemArray interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an array of one element from a single Shell item.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a one-element array from a single item. To create an array from the contents of a folder, use SHCreateShellItemArray. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArrayFromShellItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem",
        "name": "*psi",
        "description": "Type: IShellItem* Pointer to IShellItem object that represents the item."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItemArray."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically a pointer to an IShellItemArray."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Provides a default handler to extract an icon from a file.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "It is the responsibility of the caller to free the icon resources created through this function when they are no longer needed. This can be done through the DestroyIcon function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHDefExtractIcon",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszIconFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iIndex",
        "description": "Type: int The location of the icon within the file named in pszIconFile. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A flag that controls the icon extraction.  GIL_SIMULATEDOC   Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved."
      },
      {
        "in_out": "_Out_opt_",
        "type": "HICON",
        "name": "*phiconLarge",
        "description": "Type: HICON* A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the LOWORD of nIconSize. This value can be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "HICON",
        "name": "*phiconSmall",
        "description": "Type: HICON* A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the HIWORD of nIconSize."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "nIconSize",
        "description": "Type: UINT A value that contains the large icon size in its LOWORD and the small icon size in its HIWORD. Size is measured in pixels. Pass 0 to specify default large and small sizes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Executes a drag-and-drop operation. Supports drag source creation on demand, as well as drag images.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT This function supports the standard return value E_OUTOFMEMORY, as well as the following values:  ",
    "remarks": "As of Windows Vista, if a drag image is not already stored in the data object pdtobj and a drag image cannot be obtained from the window specified by hwnd, the Shell provides a generic drag image. A drag image can fail to be obtained from the specified window either because hwnd is NULL or the specified window does not support the DI_GETDRAGIMAGE message. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHDoDragDrop",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the window used to obtain the drag image. This value can be NULL. See Remarks for more details."
      },
      {
        "in_out": "_In_",
        "type": "IDataObject",
        "name": "*pdtobj",
        "description": "Type: IDataObject* A pointer to the IDataObject interface on a data object that contains the data being dragged."
      },
      {
        "in_out": "_In_",
        "type": "IDropSource",
        "name": "*pdsrc",
        "description": "Type: IDropSource* A pointer to an implementation of the IDropSource interface, which is used to communicate with the source during the drag operation.                                   As of Windows Vista, if this value is NULL, the Shell creates a drop source object for you."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEffect",
        "description": "Type: DWORD The effects that the source allows in the drag-and-drop operation. The most significant effect is whether the drag-and-drop operation permits a move. For a list of possible values, see DROPEFFECT."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD",
        "name": "*pdwEffect",
        "description": "Type: DWORD* A pointer to a value that indicates how the drag-and-drop operation affected the source data. The pdwEffect parameter is set only if the operation is not canceled. For a list of possible values, see DROPEFFECT."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sends a message to the taskbar's status area.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. If dwMessage is set to NIM_SETVERSION, the function returns TRUE if the version was successfully changed, or FALSE if the requested version is not supported. ",
    "remarks": "As of Windows 2000 (Shell32.dll version 5.0), if you set the uVersion member of the NOTIFYICONDATA structure pointed to by lpdata to NOTIFYICON_VERSION_4 or higher, Shell_NotifyIcon mouse and keyboard events are handled differently than in earlier versions of Windows. The differences include the following: As of Windows XP (Shell32.dll version 6.0), if a user passes the mouse pointer over an icon with which a balloon notification is associated, the Shell sends the following messages: In addition to those messages, as of Windows Vista (Shell32.dll version 6.0.6), if a user passes the mouse pointer over an icon with which a balloon notification is associated, the Windows Vista Shell also adds the following messages: Regardless of the operating system version, you can select which way the Shell should behave by calling Shell_NotifyIcon with dwMessage set to NIM_SETVERSION. Set the uVersion member of the NOTIFYICONDATA structure pointed to by lpdata to indicate whether you want Windows 2000, Windows Vista, or pre-version 5.0 (Windows 95) behavior. As of Windows XP Service Pack 2 (SP2), a custom icon can be displayed in the notification balloon. This allows the calling process to customize the notification beyond the previously available options of info, warning, and error, and distinguish it from other types of notification for the user. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "Shell_NotifyIcon",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMessage",
        "description": "Type: DWORD A value that specifies the action to be taken by this function. ..."
      },
      {
        "in_out": "_In_",
        "type": "PNOTIFYICONDATA",
        "name": "lpdata",
        "description": "Type: PNOTIFYICONDATA A pointer to a NOTIFYICONDATA structure. The content of the structure depends on the value of dwMessage. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the screen coordinates of the bounding rectangle of a notification icon.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "Shell_NotifyIconGetRect",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NOTIFYICONIDENTIFIER",
        "name": "*identifier",
        "description": "Type: const NOTIFYICONIDENTIFIER* Pointer to a NOTIFYICONIDENTIFIER structure that identifies the icon."
      },
      {
        "in_out": "_Out_",
        "type": "RECT",
        "name": "*iconLocation",
        "description": "Type: RECT* Pointer to a RECT structure that, when this function returns successfully, receives the coordinates of the icon."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Displays a ShellAbout dialog box.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: int TRUE if successful; otherwise, FALSE. ",
    "remarks": "Note that the ShellAbout function dialog box uses text and a default icon that are specific to Windows. To see an example of a ShellAbout dialog box, choose About Windows from the Help menu drop-down list in Windows Explorer. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "ShellAbout",
    "is_callback": 0,
    "dll": "Shell32.dll (version 3.51 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A window handle to a parent window. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szApp",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains text to be displayed in the title bar of the ShellAbout dialog box and on the first line of the dialog box after the text \"Microsoft\". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text \"Microsoft\".                       Windows 2000, Windows XP, Windows Server 2003: If the string pointed to by this parameter contains a separator (#), then the string must be writeable. Windows Vista, Windows Server 2008: This string cannot exceed 200 characters in length."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "szOtherStuff",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "HICON",
        "name": "hIcon",
        "description": "Type: HICON The handle of an icon that the function displays in the dialog box. This parameter can be NULL, in which case the function displays the Windows icon."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Registers the Shell Dynamic Data Exchange (DDE) services in the current process, notifying the system that the current process wishes to host DDE objects.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "The process that calls this function acts as the Shell and is used to view the content of folders opened with the ShellExecute 'open' verb. This function does not have an associated header or library file so it must be called by ordinal value. Call LoadLibrary with the DLL name (Shdocvw.dll) to obtain a module handle. Then call GetProcAddress with that module handle and the function ordinal number 118 to get the address of the function. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "ShellDDEInit",
    "is_callback": 0,
    "dll": "Shdocvw.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "init",
        "description": "Type: BOOL TRUE to register the current process as DDE host; FALSE to unregister it."
      }
    ],
    "min_client": "Windows XP, Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Performs an operation on a specified file.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HINSTANCE If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an int and compared to either 32 or the following error codes below.  ",
    "remarks": "Because ShellExecute can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecute is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here: There are certainly instances where ShellExecute does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initalize COM before using this function. This method allows you to execute any commands in a folder's shortcut menu or stored in the registry. To open a folder, use either of the following calls: or To explore a folder, use the following call: To launch the Shell's Find utility for a directory, use the following call. If lpOperation is NULL, the function opens the file specified by lpFile. If lpOperation is \"open\" or \"explore\", the function  attempts to open or explore the folder. To obtain information about the application that is launched as a result of calling ShellExecute, use ShellExecuteEx. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "ShellExecute",
    "is_callback": 0,
    "dll": "Shell32.dll (version 3.51 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpOperation",
        "description": "Type: LPCTSTR A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:  edit   Launches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.  explore   Explores a folder specified by lpFile.  find   Initiates a search beginning in the directory specified by lpDirectory.  open   Opens the item specified by the lpFile parameter. The item can be a file or folder.  print   Prints the file specified by lpFile. If lpFile is not a document file, the function fails.  NULL   The default verb is used, if available. If not, the \"open\" verb is used. If neither verb is available, the system uses the first verb listed in the registry."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the \"print\" verb. If a relative path is used for the lpDirectory parameter do not use a relative path for lpFile."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpParameters",
        "description": "Type: LPCTSTR If lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpDirectory",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the default (working) directory for the action. If this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do not use a relative path for lpDirectory."
      },
      {
        "in_out": "_In_",
        "type": "INT",
        "name": "nShowCmd",
        "description": "Type: INT The flags that specify how an application is to be displayed when it is opened. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. These values are defined in Winuser.h.  SW_HIDE (0)   Hides the window and activates another window.  SW_MAXIMIZE (3)   Maximizes the specified window.  SW_MINIMIZE (6)   Minimizes the specified window and activates the next top-level window in the z-order.  SW_RESTORE (9)   Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and position. An application should specify this flag when restoring a minimized window.  SW_SHOW (5)   Activates the window and displays it in its current size and position.  SW_SHOWDEFAULT (10)   Sets the show state based on the SW_ flag specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application. An application should call ShowWindow with this flag to set the initial show state of its main window.  SW_SHOWMAXIMIZED (3)   Activates the window and displays it as a maximized window.  SW_SHOWMINIMIZED (2)   Activates the window and displays it as a minimized window.  SW_SHOWMINNOACTIVE (7)   Displays the window as a minimized window. The active window remains active.  SW_SHOWNA (8)   Displays the window in its current state. The active window remains active.  SW_SHOWNOACTIVATE (4)   Displays a window in its most recent size and position. The active window remains active.  SW_SHOWNORMAL (1)   Activates and displays a window. If the window is minimized or maximized, Windows restores it to its original size and position. An application should specify this flag when displaying the window for the first time."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Performs an operation on a specified file.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. Call GetLastError for extended error information. ",
    "remarks": "Because ShellExecuteEx can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecuteEx is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here: There are instances where ShellExecuteEx does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initalize COM before using this function. When DLLs are loaded into your process, you acquire a lock known as a loader lock. The DllMain function always executes under the loader lock. It is important that you do not call ShellExecuteEx while you hold a loader lock. Because ShellExecuteEx is extensible, you could load code that does not function properly in the presence of a loader lock, risking a deadlock and therefore an unresponsive thread. With multiple monitors, if you specify an HWND and set the lpVerb member of the SHELLEXECUTEINFO structure pointed to by lpExecInfo to \"Properties\", any windows created by ShellExecuteEx might not appear in the correct position. If the function succeeds, it sets the hInstApp member of the SHELLEXECUTEINFO structure to a value greater than 32. If the function fails, hInstApp is set to the SE_ERR_XXX error value that best indicates the cause of the failure. Although hInstApp is declared as an HINSTANCE for compatibility with 16-bit Windows applications, it is not a true HINSTANCE. It can be cast only to an int and can be compared only to either the value 32 or the SE_ERR_XXX error codes. The SE_ERR_XXX error values are provided for compatibility with ShellExecute. To retrieve more accurate error information, use GetLastError. It may return one of the following values.  Opening items from a URL You can register your application to activate when passed URLs. You can also specify which protocols your application supports. See Application Registration for more info. Site chain support As of Windows 8, you can provide a site chain pointer to the ShellExecuteEx function to support item activation with services from that site. See Launching Applications (ShellExecute, ShellExecuteEx, SHELLEXECUTEINFO) for more information. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ShellExecuteEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 3.51 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "SHELLEXECUTEINFO",
        "name": "*pExecInfo",
        "description": "Type: SHELLEXECUTEINFO* A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Empties the Recycle Bin on the specified drive.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHEmptyRecycleBin",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszRootPath",
        "description": "Type: LPCTSTR The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\\windows\\system\\. It can also contain an empty string or NULL. If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD One or more of the following values.  SHERB_NOCONFIRMATION   No dialog box confirming the deletion of the objects will be displayed.  SHERB_NOPROGRESSUI   No dialog box indicating the progress will be displayed.  SHERB_NOSOUND   No sound will be played when the operation is complete."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Enumerates the user accounts that have unread email.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The hKeyUser parameter is the HKEY for the root of the user's information, for example HKEY_CURRENT_USER, or any key enumerated under HKEY_USERS. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHEnumerateUnreadMailAccounts",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HKEY",
        "name": "hKeyUser",
        "description": "Type: HKEY A valid HKEY for a given user."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Type: DWORD The index of the user account."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszMailAddress",
        "description": "Type: LPTSTR A pointer to a Unicode string that specifies the email address of an account belonging to the specified user."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchMailAddress",
        "description": "Type: int The number of characters in the email address."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is used when a calling process needs the deterministic behavior from a command template, regardless of execution context. It ignores the current process state, such as the %PATH%, GetCurrentDirectory, and parent process directory. This function is used when the command is hard-coded. This function is used by ShellExecute when handling file associations from HKEY_CLASSES_ROOT. The purpose of this function is to reduce CreateProcess command-line exploits. It is not designed for processing user input and if used for that purpose can generate unexpected failures. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHEvaluateSystemCommandTemplate",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszCmdTemplate",
        "description": "Type: PCWSTR A command line, which may or may not include parameters. If the parameters are substitution parameters, then SHEvaluateSystemCommandTemplate should be called before parameters have been replaced."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszApplication",
        "description": "Type: PWSTR* A pointer to the verified path to the application. This value should be passed as the lpApplication parameter in a call to CreateProcess or as the lpFile parameter in a call to ShellExecute. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR",
        "name": "*ppszCommandLine",
        "description": "Type: PWSTR* A pointer to a command-line string template to be used in a call to CreateProcess. Command-line parameters should be specified based on this template, and then passed as the lpCommandLine parameter to CreateProcess. It is guaranteed to be of a form that PathGetArgs can always read correctly. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.                        This parameter can be NULL if this function is not being used in association with a call to CreateProcess."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR",
        "name": "*ppszParameters",
        "description": "Type: PWSTR* A pointer to a command-line string template to be used in a call to ShellExecute. Command-line parameters should be specified based on this template, and then passed as the lpParameters parameter to ShellExecute. This parameter is identical to calling PathGetArgs. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.                        This parameter can be NULL if this function is not being used in association with a call to CreateProcess."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "Creates a new process and its primary thread. The new process runs in the security context of the calling process.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h on Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2 (include Windows.h);  Processthreadsapi.h on Windows 8 and Windows Server 2012",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. Note that the function returns before the process has finished initialization. If a required DLL cannot be located or fails to initialize, the process is terminated. To get the termination status of a process, call GetExitCodeProcess. ",
    "remarks": "The process is assigned a process identifier. The identifier is valid until the process terminates. It can be used to identify the process, or specified in the  OpenProcess function to open a handle to the process. The initial thread in the process is also assigned a thread identifier. It can be specified in the  OpenThread function to open a handle to the thread. The identifier is valid until the thread terminates and can be used to uniquely identify the thread within the system. These identifiers are returned in the  PROCESS_INFORMATION structure. The name of the executable in the command line that the operating system provides to a process is not necessarily identical to that in the command line that the calling process gives to the  CreateProcess function. The operating system may prepend a fully qualified path to an executable name that is provided without a fully qualified path. The calling thread can use the  WaitForInputIdle function to wait until the new process has finished its initialization and is waiting for user input with no input pending. This can be useful for synchronization between parent and child processes, because  CreateProcess returns without waiting for the new process to finish its initialization. For example, the creating process would use  WaitForInputIdle before trying to find a window associated with the new process. The preferred way to shut down a process is by using the  ExitProcess function, because this function sends notification of approaching termination to all DLLs attached to the process. Other means of shutting down a process do not notify the attached DLLs. Note that when a thread calls  ExitProcess, other threads of the process are terminated without an opportunity to execute any additional code (including the thread termination code of attached DLLs). For more information, see  Terminating a Process. A  parent process can directly alter the environment variables of a child process during process creation.  This is the only  situation when a process can directly change the environment settings of another process. For more information, see  Changing Environment Variables. If an application provides an environment block, the current directory information of the system drives is not automatically propagated to the new process. For example, there is an environment variable named =C: whose value is the current directory on drive C. An application must manually pass the current directory information to the new process. To do so, the application must explicitly create these environment variable strings, sort them alphabetically (because the system uses a sorted environment), and put them into the environment block. Typically, they will go at the front of the environment block, due to the environment block sort order. One way to obtain the current directory information for a drive X is to make the following call:  GetFullPathName(\"X:\", ...). That avoids an application having to scan the environment block. If the full path returned is X:\\, there is no need to pass that value on as environment data, since the root directory is the default current directory for drive X of a new process. When a process is created with CREATE_NEW_PROCESS_GROUP specified, an implicit call to  SetConsoleCtrlHandler(NULL,TRUE) is made on behalf of the new process; this means that the new process has CTRL+C disabled. This lets shells handle CTRL+C themselves, and selectively pass that signal on to sub-processes. CTRL+BREAK is not disabled, and may be used to interrupt the process/process group. The first parameter, lpApplicationName, can be NULL, in which case the executable name must be in the  white space\u00e2\u0080\u0093delimited string pointed to by lpCommandLine. If the executable or path name has a space in it, there is a risk that a different executable could be run because of the way the function parses spaces. The following example is dangerous because the function will attempt to run \"Program.exe\", if it exists, instead of \"MyApp.exe\". If a malicious user were to create an application called \"Program.exe\" on a system, any program that incorrectly calls  CreateProcess using the Program Files directory will run this application instead of the intended application. To avoid this problem, do not pass NULL for lpApplicationName. If you do pass NULL for lpApplicationName, use quotation marks around the executable path in lpCommandLine, as shown in the example below. For an example, see  Creating Processes. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "CreateProcess",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpApplicationName",
        "description": "The name of the module to be executed. ..."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPTSTR",
        "name": "lpCommandLine",
        "description": "The command line to be executed. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpProcessAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that determines whether the returned handle to the new process object can be inherited by child processes. If lpProcessAttributes is NULL, the handle cannot be inherited.     The lpSecurityDescriptor member of the structure specifies a security descriptor for the new process. If lpProcessAttributes is NULL or lpSecurityDescriptor is NULL, the process gets a default security descriptor. The ACLs in the default security descriptor for a process come from the primary token of the creator.Windows XP:  The ACLs in the default security descriptor for a process come from the primary or impersonation token of the creator. This behavior changed with Windows XP with SP2 and Windows Server 2003."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpThreadAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that determines whether the returned handle to the new thread object can be inherited by child processes. If lpThreadAttributes is NULL, the handle cannot be inherited.     The lpSecurityDescriptor member of the structure specifies a security descriptor for the main thread. If lpThreadAttributes is NULL or lpSecurityDescriptor is NULL, the thread gets a default security descriptor. The ACLs in the default security descriptor for a thread come from the process token.Windows XP:  The ACLs in the default security descriptor for a thread come from the primary or impersonation token of the creator. This behavior changed with Windows XP with SP2 and Windows Server 2003."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bInheritHandles",
        "description": "If this parameter TRUE, each inheritable handle in the calling process is inherited by the new process. If the parameter is FALSE, the handles are not inherited. Note that inherited handles have the same value and access rights as the original handles."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCreationFlags",
        "description": "The flags that control the priority class and the creation of the process. For a list of values, see  Process Creation Flags.     This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see  GetPriorityClass. If none of the priority class flags is specified, the priority class defaults to NORMAL_PRIORITY_CLASS unless the priority class of the creating process is IDLE_PRIORITY_CLASS or BELOW_NORMAL_PRIORITY_CLASS. In this case, the child process receives the default priority class of the calling process."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "lpEnvironment",
        "description": "A pointer to the environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process. An environment block consists of a null-terminated block of null-terminated strings. Each string is in the following form: name=value\\0 Because the equal sign is used as a separator, it must not be used in the name of an environment variable. An environment block can contain either Unicode or ANSI characters. If the environment block pointed to by lpEnvironment contains Unicode characters, be sure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. If this parameter is NULL and the environment block of the parent process contains Unicode characters, you must also ensure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. The ANSI version of this function, CreateProcessA fails if the total size of the environment block for the process exceeds 32,767 characters. Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block. A Unicode environment block is terminated by four zero bytes: two for the last string, two more to terminate the block."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpCurrentDirectory",
        "description": "The full path to the current directory for the process. The string can also specify a UNC path. If this parameter is NULL, the new process will have the same current drive and directory as the calling process. (This feature is provided primarily for shells that need to start an application and specify its initial drive and working directory.)"
      },
      {
        "in_out": "_In_",
        "type": "LPSTARTUPINFO",
        "name": "lpStartupInfo",
        "description": "A pointer to a  STARTUPINFO or STARTUPINFOEX structure. To set extended attributes, use a STARTUPINFOEX structure and specify EXTENDED_STARTUPINFO_PRESENT in the dwCreationFlags parameter. Handles in  STARTUPINFO or STARTUPINFOEX must be closed with  CloseHandle when they are no longer needed. Important  The caller is responsible for ensuring that the standard handle fields in STARTUPINFO  contain valid handle values. These fields are copied unchanged to the child process without validation, even when the dwFlags member specifies STARTF_USESTDHANDLES. Incorrect values can cause the child process to misbehave or crash. Use the Application Verifier runtime verification tool to detect invalid handles."
      },
      {
        "in_out": "_Out_",
        "type": "LPPROCESS_INFORMATION",
        "name": "lpProcessInformation",
        "description": "A pointer to a  PROCESS_INFORMATION structure that receives identification information about the new process.     Handles in  PROCESS_INFORMATION must be closed with  CloseHandle when they are no longer needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by IFileOperation.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: int Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero. It is good practice to examine the value of the fAnyOperationsAborted member of the SHFILEOPSTRUCT. SHFileOperation can return 0 for success if the user cancels the operation. If you do not check fAnyOperationsAborted as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions. Do not use GetLastError with the return values of this function. To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and for these specific values only these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:   ",
    "remarks": "You should use fully qualified path names with this function. Using it with relative path names is not thread safe. With two exceptions, you cannot use SHFileOperation to move special folders from a local drive to a remote computer by specifying a network path. The exceptions are the My Documents (CSIDL_PERSONAL, CSIDL_DOCUMENTS) and My Pictures folders (CSIDL_MYPICTURES). When used to delete a file, SHFileOperation permanently deletes the file unless you set the FOF_ALLOWUNDO flag in the fFlags member of the SHFILEOPSTRUCT structure pointed to by lpFileOp. Setting that flag sends the file to the Recycle Bin. If you want to simply delete a file and guarantee that it is not placed in the Recycle Bin, use DeleteFile. If a copy callback handler is exposed and registered, SHFileOperation calls it unless you set a flag such as FOF_NOCONFIRMATION in the fFlags member of the structure pointed to by lpFileOp. See ICopyHook::CopyCallback for details on implementing copy callback handlers. File deletion is recursive unless you set the FOF_NORECURSION flag in lpFileOp. With Windows 2000 or later, it is possible to connect an HTML file with a folder that contains related files such as Graphics Interchange Format (GIF) images or style sheets. If file connection is enabled, when you move or copy the HTML file, the connected folder and all of its files are also moved or copied. Conversely, if you move the folder with the related files, the HTML file is also moved. The HTML file must have a .htm or .html extension. You create the connection to the related files by placing the folder that contains them into the same folder as the HTML file. The name of the folder that contains the connected files must be the same as the name of the HTML file followed by \"_files\" or \".files\" (this is case sensitive; for example, \".Files\" does not work). An example is given here. File connection is enabled by default. It can be disabled by adding a REG_DWORD entry, NoFileFolderConnection, as shown here:  Setting NoFileFolderConnection to 1 disables file connection. If the value is set to zero or is missing, file connection is enabled. To move only the specified files and none of the connected files, set the FOF_NO_CONNECTED_ELEMENTS flag in the fFlags member of the structure pointed to by lpFileOp. Note that the use of a folder with a name like \"MyFile_files\" to define a connection may not be valid for localized versions of Windows. The term \"files\" may need to be replaced by the equivalent word in the local language. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHFileOperation",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPSHFILEOPSTRUCT",
        "name": "lpFileOp",
        "description": "Type: LPSHFILEOPSTRUCT A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees a file name mapping object that was retrieved by the SHFileOperation function.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHFreeNameMappings",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hNameMappings",
        "description": "Type: HANDLE A handle to the file name mapping object to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves extended property data from a relative identifier list.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or E_INVALIDARG otherwise. ",
    "remarks": "This function extracts only information that is present in the pointer to an item identifier list (PIDL). Since the content of a PIDL depends on the folder object that created the PIDL, there is no guarantee that all requested information will be available. In addition, the information that is returned reflects the state of the object at the time the PIDL was created. The current state of the object could be different. For example, if you set nFormat to SHGDFIL_FINDDATA, the function might assign meaningful values to only some of the members of the WIN32_FIND_DATA structure. The remaining members will be set to zero. To retrieve complete current information on a file system file or folder, use standard file system functions such as GetFileTime or FindFirstFile. E_INVALIDARG is returned if the psf, pidl, pv, or cb parameter does not match the nFormat parameter, or if nFormat is not one of the specific SHGDFIL_ values shown above. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetDataFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellFolder",
        "name": "*psf",
        "description": "Type: IShellFolder* The address of the parent IShellFolder interface. This must be the immediate parent of the ITEMIDLIST structure referenced by the pidl parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to an ITEMIDLIST structure that identifies the object relative to the folder specified in psf."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "nFormat",
        "description": "Type: int The format in which the data is being requested. This parameter must be set to one of the following values.  SHGDFIL_FINDDATA   Format used for file system objects. The pv parameter is the address of a WIN32_FIND_DATA structure.  SHGDFIL_NETRESOURCE   Format used for network resources. The pv parameter is the address of a NETRESOURCE structure.  SHGDFIL_DESCRIPTIONID    Version 4.71. Format used for network resources. The pv parameter is the address of an SHDESCRIPTIONID structure."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "*pv",
        "description": "Type: void* A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by nFormat. If nFormat is SHGDFIL_NETRESOURCE, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be NULL."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cb",
        "description": "Type: int Size of the buffer at pv, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetDesktopFolder",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IShellFolder",
        "name": "**ppshf",
        "description": "Type: IShellFolder** When this method returns, receives an IShellFolder interface pointer for the desktop folder. The calling application is responsible for eventually freeing the interface by calling its IUnknown::Release method."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves disk space information for a disk volume.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "In Shell32.dll version 5.0 and later, SHGetDiskFreeSpace does not have its own implementation and is defined in Shellapi.h as shown here. When you call SHGetDiskFreeSpace, you are actually calling SHGetDiskFreeSpaceEx. This function calls the GetDiskFreeSpaceEx function if it is available on the operating system. If GetDiskFreeSpaceEx is not available, it is emulated by calling the GetDiskFreeSpace function and manipulating the return values. For additional information, see the documentation for GetDiskFreeSpaceEx. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetDiskFreeSpace",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCTSTR",
        "name": "pszVolume",
        "description": "Type: LPCTSTR A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive.                       When using Shell32.dll versions previous to version 5.0, this must be an ANSI string. Unicode is not supported in those versions."
      },
      {
        "in_out": "",
        "type": "ULARGE_INTEGER",
        "name": "*pqwFreeCaller",
        "description": "Type: ULARGE_INTEGER* The address of a ULARGE_INTEGER value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume."
      },
      {
        "in_out": "",
        "type": "ULARGE_INTEGER",
        "name": "*pqwTot",
        "description": "Type: ULARGE_INTEGER* The address of a ULARGE_INTEGER value that receives the total size of the volume, in bytes."
      },
      {
        "in_out": "",
        "type": "ULARGE_INTEGER",
        "name": "*pqwFree",
        "description": "Type: ULARGE_INTEGER* The address of a ULARGE_INTEGER value that receives the number of bytes of free space on the volume."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves disk space information for a disk volume.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "The similarly named function SHGetDiskFreeSpace is merely an alias for SHGetDiskFreeSpaceEx. When you call SHGetDiskFreeSpace you actually call this function. This function calls the GetDiskFreeSpaceEx function if it is available on the operating system. If GetDiskFreeSpaceEx is not available, it is emulated by calling the GetDiskFreeSpace function and manipulating the return values. For additional information, see the documentation for GetDiskFreeSpaceEx. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetDiskFreeSpaceEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszDirectoryName",
        "description": "Type: LPCTSTR A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ULARGE_INTEGER",
        "name": "*pulFreeBytesAvailableToCaller",
        "description": "Type: ULARGE_INTEGER* Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ULARGE_INTEGER",
        "name": "*pulTotalNumberOfBytes",
        "description": "Type: ULARGE_INTEGER* Pointer to a value that receives the total size of the volume, in bytes."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ULARGE_INTEGER",
        "name": "*pulTotalNumberOfFreeBytes",
        "description": "Type: ULARGE_INTEGER* Pointer to a value that receives the number of bytes of free space on the volume."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Returns the type of media that is in the given drive.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetDriveMedia",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDrive",
        "description": "Type: PCWSTR The drive in which to check the media type."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD",
        "name": "*pdwMediaContent",
        "description": "Type: DWORD* A pointer to the type of media in the given drive. A combination of ARCONTENT flags."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: DWORD_PTR Returns a value whose meaning depends on the uFlags parameter. If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise. If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file. It will be one of the following values.  ",
    "remarks": "You should call this function from a background thread. Failure to do so could cause the UI to stop responding. If SHGetFileInfo returns an icon handle in the hIcon member of the SHFILEINFO structure pointed to by psfi, you are responsible for freeing it with DestroyIcon when you no longer need it. You must initialize Component Object Model (COM) with CoInitialize or OleInitialize prior to calling SHGetFileInfo. When you use the SHGFI_EXETYPE flag with a Windows application, the Windows version of the executable is given in the HIWORD of the return value. This version is returned as a hexadecimal value. For details on equating this value with a specific Windows version, see Using the Windows Headers. The following code example uses SHGetFileInfo to retrieve the display name of the Recycle Bin, identified by its PIDL. ",
    "return_type": "DWORD_PTR",
    "category": "Windows Shell",
    "name": "SHGetFileInfo",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.          \t\t\t\t\t If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed. If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes. This string can use either short (the 8.3 form) or long file names."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFileAttributes",
        "description": "Type: DWORD A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored."
      },
      {
        "in_out": "_Inout_",
        "type": "SHFILEINFO",
        "name": "*psfi",
        "description": "Type: SHFILEINFO* Pointer to a SHFILEINFO structure to receive the file information."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cbFileInfo",
        "description": "Type: UINT The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT The flags that specify the file information to retrieve. This parameter can be a combination of the following values.  SHGFI_ADDOVERLAYS (0x000000020)    Version 5.0. Apply the appropriate overlays to the file's icon. The SHGFI_ICON flag must also be set.  SHGFI_ATTR_SPECIFIED (0x000020000)   Modify SHGFI_ATTRIBUTES to indicate that the dwAttributes member of the SHFILEINFO structure at psfi contains the specific attributes that are desired. These attributes are passed to IShellFolder::GetAttributesOf. If this flag is not specified, 0xFFFFFFFF is passed to IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot be specified with the SHGFI_ICON flag.  SHGFI_ATTRIBUTES (0x000000800)   Retrieve the item attributes. The attributes are copied to the dwAttributes member of the structure specified in the psfi parameter. These are the same attributes that are obtained from IShellFolder::GetAttributesOf.  SHGFI_DISPLAYNAME (0x000000200)   Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the szDisplayName member of the structure specified in psfi. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.  SHGFI_EXETYPE (0x000002000)   Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.  SHGFI_ICON (0x000000100)   Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.  SHGFI_ICONLOCATION (0x000001000)   Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the IExtractIcon::GetIconLocation method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the szDisplayName member of the structure specified by psfi. The icon's index is copied to that structure's iIcon member.  SHGFI_LARGEICON (0x000000000)   Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The SHGFI_ICON flag must also be set.  SHGFI_LINKOVERLAY (0x000008000)   Modify SHGFI_ICON, causing the function to add the link overlay to the file's icon. The SHGFI_ICON flag must also be set.  SHGFI_OPENICON (0x000000002)   Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.  SHGFI_OVERLAYINDEX (0x000000040)    Version 5.0. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi. This flag requires that the SHGFI_ICON be set as well.  SHGFI_PIDL (0x000000008)   Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.  SHGFI_SELECTED (0x000010000)   Modify SHGFI_ICON, causing the function to blend the file's icon with the system highlight color. The SHGFI_ICON flag must also be set.  SHGFI_SHELLICONSIZE (0x000000004)   Modify SHGFI_ICON, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The SHGFI_ICON flag must also be set.  SHGFI_SMALLICON (0x000000001)   Modify SHGFI_ICON, causing the function to retrieve the file's small icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains small icon images. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.  SHGFI_SYSICONINDEX (0x000004000)   Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon member of psfi. The return value is a handle to the system image list. Only those images whose indices are successfully copied to iIcon are valid. Attempting to access other images in the system image list will result in undefined behavior.  SHGFI_TYPENAME (0x000000400)   Retrieve the string that describes the file's type. The string is copied to the szTypeName member of the structure specified in psfi.  SHGFI_USEFILEATTRIBUTES (0x000000010)   Indicates that the function should not attempt to access the file specified by pszPath. Rather, it should act as if the file specified by pszPath exists with the file attributes passed in dwFileAttributes. This flag cannot be combined with the SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]",
    "library": "Shell32.lib",
    "min_server": "",
    "header": "Shlobj.h",
    "return_value": "Returns S_OK if successful, or an error value otherwise. ",
    "remarks": "Since SHGetFolderPath is a wrapper for SHGetKnownFolderPath, this function (SHGetFolderPathEx) also serves as an extension to SHGetFolderPath. ",
    "return_type": "HRESULT WINAPI",
    "category": "Windows Shell",
    "name": "SHGetFolderPathEx",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "A reference to the KNOWNFOLDERID that identifies the folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user. Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pszPath",
        "description": "A null-terminated, Unicode string. This buffer must be of size cchPath. When SHGetFolderPathEx returns successfully, this parameter contains the path for the known folder."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchPath",
        "description": "The size of the ppszPath buffer, in characters."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This function replaces SHGetFolderPath. That older function is now simply a wrapper for SHGetKnownFolderPath. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetKnownFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID that identifies the folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user.                                Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszPath",
        "description": "Type: PWSTR* When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the path of the known folder. The calling process is responsible for freeing this resource once it is no longer needed by calling CoTaskMemFree. The returned path does not include a trailing backslash. For example, \"C:\\Users\" is returned rather than \"C:\\Users\\\"."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Returns the index of the overlay icon in the system image list.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns the index of the overlay icon in the system image list if successful, or -1 otherwise. ",
    "remarks": "Icon overlays are part of the system image list. They have two identifiers. The first is a one-based overlay index that identifies the overlay relative to other overlays in the image list. The other is an image index that identifies the actual image. These two indexes are equivalent to the values that you assign to the iOverlay and iImage parameters, respectively, when you add an icon overlay to a private image list with ImageList_SetOverlayImage. SHGetIconOverlayIndex returns the overlay index. To convert an overlay index to its equivalent image index, call INDEXTOOVERLAYMASK. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHGetIconOverlayIndex",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszIconPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the fully qualified path of the file that contains the icon."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iIconIndex",
        "description": "Type: int The icon's index in the file pointed to by pszIconPath. To request a standard overlay icon, set pszIconPath to NULL, and iIconIndex to one of the following:  IDO_SHGIOI_SHARE (0x0FFFFFFF)   The overlay icon that indicates a shared folder.  IDO_SHGIOI_LINK (0x0FFFFFFE)   The overlay icon that indicates a linked folder or file.  IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)   The overlay icon that indicates a slow file.  IDO_SHGIOI_DEFAULT (0x0FFFFFFC)   Windows 7 and later. The overlay icon that indicates that the item is the default in a set. One example is the default printer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the pointer to an item identifier list (PIDL) of an object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetIDListFromObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown",
        "name": "*punk",
        "description": "Type: IUnknown* A pointer to the IUnknown of the object from which to get the PIDL."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE",
        "name": "*ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* When this function returns, contains a pointer to the PIDL of the given object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves an image list.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The IImageList pointer type, such as that returned in the ppv parameter, can be cast as an HIMAGELIST as needed; for example, for use in a list view. Conversely, an HIMAGELIST can be cast as a pointer to an IImageList. As of Windows Vista, SHIL_SMALL, SHIL_LARGE, and SHIL_EXTRALARGE scale with dots per inch (dpi) if the process is marked as dpi-aware. To set these types to be dpi-aware, call SetProcessDPIAware. SHIL_JUMBO is fixed at 256 pixels regardless of the dpi-aware setting. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetImageList",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iImageList",
        "description": "Type: int The image type contained in the list. One of the following values:  SHIL_LARGE (0x0)   0x0. The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the Appearance tab in Display Properties, the image is 48x48 pixels.  SHIL_SMALL (0x1)   0x1. These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.  SHIL_EXTRALARGE (0x2)   0x2. These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.  SHIL_SYSSMALL (0x3)   0x3. These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.  SHIL_JUMBO (0x4)   0x4. Windows Vista and later. The image is normally 256x256 pixels.  SHIL_LAST   The largest valid flag value, for validation purposes."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the image list interface identifier, normally IID_IImageList."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IImageList."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "There are a number of components, such as Shell extension handlers, that are implemented as DLLs and run in a host process such as Windows Explorer (Explorer.exe) or Internet Explorer (Iexplore.exe). Typically, when the user closes the host process, the component is shut down immediately as well. Such an abrupt termination can create problems for some components. For example, if a component is using a background thread to download data or run user-interface functions, it might need additional time to safely shut itself down. SHGetInstanceExplorer allows components that run in a host process to hold a reference on the host process. SHGetInstanceExplorer increments the host's reference count and returns a pointer to the host's IUnknown interface. By holding that reference, a component can prevent the host process from closing prematurely. After the component has completed its necessary processing, it should call (*ppunk)->Release to release the host's reference and allow the process to terminate. SHGetInstanceExplorer succeeds only if it is called from from an application which had previously called SHSetInstanceExplorer to set a process reference. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetInstanceExplorer",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IUnknown",
        "name": "**ppunk",
        "description": "Type: IUnknown** When this function returns successfully, contains the address of the host process' IUnknown interface pointer. This is a free-threaded interface used to prevent the host process from terminating. If the function call fails, this value is set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an IShellItem or related object based on an item specified by an IDataObject.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is recommended that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetItemFromDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDataObject",
        "name": "*pdtobj",
        "description": "Type: IDataObject* A pointer to the source IDataObject instance."
      },
      {
        "in_out": "_In_",
        "type": "DATAOBJ_GET_ITEM_FLAGS",
        "name": "dwFlags",
        "description": "Type: DATAOBJ_GET_ITEM_FLAGS One or more values from the DATAOBJ_GET_ITEM_FLAGS enumeration to specify options regarding the target object. This value can be 0."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IShellItem."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves an IShellItem for an object.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "From the standpoint of performance, this method is preferred to SHGetIDListFromObject in those cases where the IDList is already bound to a folder. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetItemFromObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown",
        "name": "*punk",
        "description": "Type: IUnknown* A pointer to the IUnknown of the object."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired IID."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IShellItem or a related interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the path of a known folder as an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This function replaces SHGetFolderLocation. That older function is now simply a wrapper for SHGetKnownFolderIDList. Callers using this function must have at least User privileges. Some known folders, for example, the Documents folder, are per-user. Each user has a different path for the Documents folder. If hToken is NULL, the API tries to access the current user's instance of the folder. If hToken is a valid user token, the API tries to impersonate the user using this token, and attempts to access that user's instance of the folder. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetKnownFolderIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID that identifies the folder. The folders associated with the known folder IDs might not exist on a particular system."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that specify special retrieval options. This value can be 0; otherwise, it is one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents. The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE",
        "name": "*ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* When this method returns, contains a pointer to the PIDL of the folder. This parameter is passed uninitialized. The caller is responsible for freeing the returned PIDL when it is no longer needed by calling ILFree."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves an IShellItem object that represents a known folder.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "The caller of this function must have Administrator privileges. To call this function on public known folders, the caller must have Administrator privileges. For per-user known folders the caller only requires User privileges. Some of the known folders, for example, the Documents folder, are per-user. Every user has a different path for their Documents folder. If hToken is NULL, the API tries to access the calling application's instance of the folder, which is that of the current user. If hToken is a valid user token, the API tries to impersonate the user using this token and tries to access that user's instance. This function cannot be called on folders of type KF_CATEGORY_FIXED and KF_CATEGORY_VIRTUAL. To call this function on a folder of type KF_CATEGORY_COMMON, the calling application must be running with elevated privileges. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetKnownFolderItem",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item."
      },
      {
        "in_out": "_In_",
        "type": "KNOWN_FOLDER_FLAG",
        "name": "dwFlags",
        "description": "Type: KNOWN_FOLDER_FLAG Flags that specify special options used in the retrieval of the known folder IShellItem. This value can be KF_FLAG_DEFAULT; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents.  The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHSetKnownFolderPath to set folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface that represents the item, usually IID_IShellItem or IID_IShellItem2."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the localized name of a file in a Shell folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetLocalizedName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a string that specifies the fully qualified path of the file."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszResModule",
        "description": "Type: PWSTR When this function returns, contains a pointer to a string resource that specifies the localized version of the file name."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cch",
        "description": "Type: UINT When this function returns, contains the size of the string, in WCHARs, at pszResModule."
      },
      {
        "in_out": "_Out_",
        "type": "int",
        "name": "*pidsRes",
        "description": "Type: int* When this function returns, contains a pointer to the ID of the localized file name in the resource file."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the display name of an item identified by its IDList.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is the responsibility of the caller to free the string pointed to by ppszName when it is no longer needed. Call CoTaskMemFree on *ppszName to free the memory. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetNameFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE A PIDL that identifies the item."
      },
      {
        "in_out": "_In_",
        "type": "SIGDN",
        "name": "sigdnName",
        "description": "Type: SIGDN A value from the SIGDN enumeration that specifies the type of display name to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszName",
        "description": "Type: PWSTR* A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the property's canonical name given its PROPERTYKEY.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetNameFromPropertyKey",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPERTYKEY",
        "name": "propkey",
        "description": "Type: REFPROPERTYKEY A pointer to a PROPERTYKEY structure containing the property's identifiers."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "*ppszCanonicalName",
        "description": "Type: PWSTR* The address of a pointer to a buffer that receives the property name as a null-terminated Unicode string. It is the responsibility of the caller to release this string through a call to CoTaskMemFree once it is no longer needed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "SHGetNewLinkInfo determines whether the destination file system supports long file names. If it does, a long file name is used for the shortcut name. If the destination file system does not support long file names, the shortcut name is returned in an 8.3 format. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetNewLinkInfo",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszLinkTo",
        "description": "Type: LPCTSTR A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszDir",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszName",
        "description": "Type: LPTSTR A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL",
        "name": "*pfMustCopy",
        "description": "Type: BOOL* The address of a BOOL value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in pszLinkTo specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT The options for the function. This can be zero or a combination of the following values.  SHGNLI_PIDL (0x000000001)   0x000000001. The target pointed to by pszLinkTo is a PIDL that represents the target. If this flag is not included, pszLinkTo is regarded as the address of a string that contains the path and file name of the target.  SHGNLI_NOUNIQUE (0x000000002)   0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.  SHGNLI_PREFIXNAME (0x000000004)   0x000000004. The created name will be preceded by the string \"Shortcut to \".  SHGNLI_NOLNK (0x000000008)   0x000000008. Version 5.0 Do not add the .lnk file name extension. You must set the _WIN32_IE macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.  SHGNLI_NOLOCNAME (0x000000010)   0x000000010. Windows Vista and later. Use the non-localized parsing name of the target pointed to by pszLinkTo as the name of the shortcut file. If this flag is not set, the localized name is used.  SHGNLI_USEURLEXT (0x000000020)   0x000000020. Windows 7 and later. Append a .url file name extension (rather than .lnk) to the name pointed to by pszName. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP, Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts an item identifier list to a file system path.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "If the location specified by the pidl parameter is not part of the file system, this function will fail. If the pidl parameter specifies a shortcut, the pszPath will contain the path to the shortcut, not to the shortcut's target. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetPathFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop)."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts an item identifier list to a file system path. This function extends SHGetPathFromIDList by allowing you to set the initial size of the string buffer and declare the options below.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "Except for UNC printer names, if the location specified by the pidl parameter is not part of the file system, this function fails. If the pidl parameter specifies a shortcut, the pszPath contains the path to the shortcut, not to the shortcut's target. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetPathFromIDListEx",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop)."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "Type: PWSTR When this function is called it is passed a null-terminated, Unicode buffer to receive the file system path. This buffer is of size cchPath.                                                    When this function returns, contains the address of a null-terminated, Unicode buffer that contains the file system path. This buffer is of size cchPath."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cchPath",
        "description": "Type: DWORD The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "",
        "type": "GPFIDL_FLAGS",
        "name": "uOpts",
        "description": "Type: GPFIDL_FLAGS These flags determine the type of path returned.  GPFIDL_DEFAULT (0x0000)   Win32 file names, servers, and root drives are included.  GPFIDL_ALTNAME (0x0001)   Uses short file names.  GPFIDL_UNCPRINTER (0x0002)   Include UNC printer names items."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the current Shell option settings.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHGetSettings",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LPSHELLFLAGSTATE",
        "name": "lpsfs",
        "description": "Type: LPSHELLFLAGSTATE The address of a SHELLFLAGSTATE structure that receives the Shell option settings."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMask",
        "description": "Type: DWORD A set of flags that determine which members of lpsfs are being requested. This can be one or more of the following values.  SSF_DESKTOPHTML   The fDesktopHTML member is being requested.  SSF_DONTPRETTYPATH   The fDontPrettyPath member is being requested.  SSF_DOUBLECLICKINWEBVIEW   The fDoubleClickInWebView member is being requested.  SSF_HIDEICONS   The fHideIcons member is being requested.  SSF_MAPNETDRVBUTTON   The  \t\t\t\t\t\tfMapNetDrvBtn member is being requested.  SSF_NOCONFIRMRECYCLE   The  \t\t\t\t\t\tfNoConfirmRecycle member is being requested.  SSF_SHOWALLOBJECTS   The  \t\t\t\t\t\tfShowAllObjects member is being requested.  SSF_SHOWATTRIBCOL   The  \t\t\t\t\t\tfShowAttribCol member is being requested.  Windows Vista: Not used.   SSF_SHOWCOMPCOLOR   The  \t\t\t\t\t\tfShowCompColor member is being requested.  SSF_SHOWEXTENSIONS   The  \t\t\t\t\t\tfShowExtensions member is being requested.  SSF_SHOWINFOTIP   The  \t\t\t\t\t\tfShowInfoTip member is being requested.  SSF_SHOWSYSFILES   The  \t\t\t\t\t\tfShowSysFiles member is being requested.  SSF_WIN95CLASSIC   The  \t\t\t\t\t\tfWin95Classic member is being requested."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about system-defined Shell icons.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If this function returns an icon handle in the hIcon member of the SHSTOCKICONINFO  structure pointed to by psii, you are responsible for freeing the icon with DestroyIcon when you no longer need it. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetStockIconInfo",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "SHSTOCKICONID",
        "name": "siid",
        "description": "Type: SHSTOCKICONID One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A combination of zero or more of the following flags that specify which information is requested.  SHGSI_ICONLOCATION   The szPath and iIcon members of the SHSTOCKICONINFO structure receive the path and icon index of the requested icon, in a format suitable for passing to the ExtractIcon function. The numerical value of this flag is zero, so you always get the icon location regardless of other flags.  SHGSI_ICON   The hIcon member of the SHSTOCKICONINFO structure receives a handle to the specified icon.  SHGSI_SYSICONINDEX   The iSysImageImage member of the SHSTOCKICONINFO structure receives the index of the specified icon in the system imagelist.  SHGSI_LINKOVERLAY   Modifies the SHGSI_ICON value by causing the function to add the link overlay to the file's icon.  SHGSI_SELECTED   Modifies the SHGSI_ICON value by causing the function to blend the icon with the system highlight color.  SHGSI_LARGEICON   Modifies the SHGSI_ICON value by causing the function to retrieve the large version of the icon, as specified by the SM_CXICON and SM_CYICON system metrics.  SHGSI_SMALLICON   Modifies the SHGSI_ICON value by causing the function to retrieve the small version of the icon, as specified by the SM_CXSMICON and SM_CYSMICON system metrics.  SHGSI_SHELLICONSIZE   Modifies the SHGSI_LARGEICON or SHGSI_SMALLICON values by causing the function to retrieve the Shell-sized icons rather than the sizes specified by the system metrics."
      },
      {
        "in_out": "_Inout_",
        "type": "SHSTOCKICONINFO",
        "name": "*psii",
        "description": "Type: SHSTOCKICONINFO* A pointer to a SHSTOCKICONINFO structure. When this function is called, the cbSize member of this structure needs to be set to the size of the SHSTOCKICONINFO structure. When this function returns, contains a pointer to a SHSTOCKICONINFO structure that contains the requested information."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the temporary property for the given item. A temporary property is a read/write store that holds properties only for the lifetime of the IShellItem object, rather than being persisted back into the item.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetTemporaryPropertyForItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem",
        "name": "*psi",
        "description": "Type: IShellItem* A pointer to the item for which the temporary property is to be retrieved."
      },
      {
        "in_out": "",
        "type": "REFPROPERTYKEY",
        "name": "pk",
        "description": "Type: REFPROPERTYKEY The property key."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT",
        "name": "*ppropvarInk",
        "description": "Type: PROPVARIANT* A pointer to the temporary property for the item."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Retrieves a specified user's unread message count for any or all email accounts.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetUnreadMailCount",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HKEY",
        "name": "hKeyUser",
        "description": "Type: HKEY A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszMailAddress",
        "description": "Type: LPCTSTR A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is NULL, pdwCount returns the total count of unread messages for all accounts owned by the designated user."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD",
        "name": "*pdwCount",
        "description": "Type: DWORD* Pointer to a DWORD value which receives the unread message count."
      },
      {
        "in_out": "_Out_opt_",
        "type": "FILETIME",
        "name": "*pFileTime",
        "description": "Type: FILETIME* A pointer to a FILETIME structure.  The use of this parameter is determined by whether pszMailAddress is NULL. If pszMailAddress is NULL, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If pszMailAddress is not NULL, then this parameter is treated as an [out] parameter, which points to a FILETIME structure into which the function places the timestamp of the last SHSetUnreadMailCount call for the specified user and email account."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPCTSTR",
        "name": "pszShellExecuteCommand",
        "description": "Type: LPCTSTR A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the specified user and email account. This command string starts the email application that owns the account referenced by pszMailAddress. If the ShellExecute command is not required, this parameter can be NULL. If pszMailAddress is NULL, this parameter is ignored and must be NULL."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchShellExecuteCommand",
        "description": "Type: int The maximum size, in characters, of the ShellExecute command buffer pointed to by pszShellExecuteCommand. This parameter must be zero for total counts when pszMailAddress is NULL. It can also be NULL whenever the ShellExecute command string is not required."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "If pszPath is a directory, SHIsFileAvailableOffline will not return the OFFLINE_STATUS_INCOMPLETE flag. If SHIsFileAvailableOffline returns both OFFLINE_STATUS_LOCAL and OFFLINE_STATUS_REMOTE, the file or directory is open in both places.  This is common when the server is online. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHIsFileAvailableOffline",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a string value that specifies the full path to a network file or directory. This path does not need to be in UNC form. If pszPath is not a network path, the function returns E_INVALIDARG."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "pdwStatus",
        "description": "Type: LPDWORD A pointer to a variable of type DWORD that receives one or more of the following flags if the function succeeds.  OFFLINE_STATUS_LOCAL (0x01)   If the file is open, it is open in the cache.  OFFLINE_STATUS_REMOTE (0x02)   If the file is open, it is open on the server.  OFFLINE_STATUS_INCOMPLETE (0x04)   The local copy is currently incomplete. The file cannot be opened in offline mode until it has been synchronized."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an instance of the specified object class from within the context of the Shell's process.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise. In Windows Vista and later versions, always returns E_NOTIMPL. ",
    "remarks": "This function creates the requested object instance by calling the CoCreateInstance function and immediately releasing the returned object. The associated DLL is unloaded according to standard Component Object Model (COM) rules when it returns S_OK from its DllCanUnloadNow function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLoadInProc",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFCLSID",
        "name": "rclsid",
        "description": "Type: REFCLSID The CLSID of the object class to be created."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT Always returns S_OK. ",
    "remarks": "A call to SHLoadNonloadedIconOverlayIdentifiers does not result in the immediate loading of a Shell extension, nor does it cause an icon overlay handler to be loaded. A call to SHLoadNonloadedIconOverlayIdentifiers results in a situation such that the next code to ask for icon overlay information triggers a comparison of icon overlays in the registry to those that are already loaded. If an icon overlay is newly registered and the system has not already reached its upper limit of fifteen icon overlays, the new overlay is loaded. SHLoadNonloadedIconOverlayIdentifiers alone does not load a new icon overlay; you also need to trigger an action that uses the overlay, such as a refresh of a Windows Explorer view. For more information, see How to Implement Icon Overlay Handlers. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLoadNonloadedIconOverlayIdentifiers",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Makes a copy of a string in newly allocated memory.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLocalStrDup",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "psz",
        "description": "Type: PCTSTR A pointer to a null-terminated, Unicode string to be copied."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTSTR",
        "name": "*ppsz",
        "description": "Type: PTSTR* The address of a pointer to an allocated string that, when this function returns successfully, receives the result. SHLocalStrDup allocates memory for this string with LocalAlloc. You should free the string with LocalFree when it is no longer needed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Displays a merged property sheet for a set of files. Property values common to all the files are shown while those that differ display the string (multiple values).",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHMultiFileProperties",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDataObject",
        "name": "*pdtobj",
        "description": "Type: IDataObject* A pointer to a data object that supplies the PIDLs of all of the files for which to display the merged property sheet. The data object must use the CFSTR_SHELLIDLIST clipboard format. The parent folder's implementation of IShellFolder::GetDisplayNameOf must return a fully qualified file system path for each item in response to the SHGDN_FORPARSING flag."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Must be set to 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Opens a Windows Explorer window with specified items in a particular folder selected.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "CoInitialize or CoInitializeEx must be called before using SHOpenFolderAndSelectItems. Not doing so causes SHOpenFolderAndSelectItems to fail. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHOpenFolderAndSelectItems",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to a fully qualified item ID list that specifies the folder."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT A count of items in the selection array, apidl. If cidl is zero, then pidlFolder must point to a fully specified ITEMIDLIST describing a single item to select. This function opens the parent folder and selects that item."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "apidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY A pointer to an array of PIDL structures, each of which is an item to select in the target folder referenced by pidlFolder."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The optional flags. Under Windows XP this parameter is ignored. In Windows Vista, the following flags are defined.  OFASI_EDIT (0x0001)   Select an item and put its name in edit mode. This flag can only be used when a single item is being selected. For multiple item selections, it is ignored.  OFASI_OPENDESKTOP (0x0002)   Select the item or items on the desktop rather than in a Windows Explorer window. Note that if the desktop is obscured behind open windows, it will not be made visible."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Displays the Open With dialog box.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Starting in Windows 10, the OAIF_ALLOW_REGISTRATION, OAIF_FORCE_REGISTRATION, and OAIF_HIDE_REGISTRATION flags will be ignored by SHOpenWithDialog. The Open With dialog box can no longer be used to change the default program used to open a file extension. You can only use SHOpenWithDialog to open a single file. If SHOpenWithDialog is called without passing OAIF_EXEC, the user will receive a dialog that informs them that they can change the default programs used to open file extensions in their Settings. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHOpenWithDialog",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND The handle of the parent window. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "OPENASINFO",
        "name": "*poainfo",
        "description": "Type: const OPENASINFO* A pointer to an OPENASINFO structure, which specifies the contents of the resulting dialog."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Displays the Folder Sharing tab on the properties sheet for the specified folder.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: HRESULT This function always returns S_OK. ",
    "remarks": "This function has no associated .lib file. You must use LoadLibrary and GetProcAddress to use it. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ShowShareFolderUI",
    "is_callback": 0,
    "dll": "Ntshrui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window for the property sheet."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszPath",
        "description": "Type: LPCWSTR A pointer to a string that specifies the path to the folder that displays its Folder Sharing tab."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This function is the preferred method to convert a string to a pointer to an item identifier list (PIDL).",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "You should call this function from a background thread. Failure to do so could cause the UI to stop responding. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHParseDisplayName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszName",
        "description": "Type: LPCWSTR A pointer to a zero-terminated wide string that contains the display name to parse."
      },
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx",
        "name": "*pbc",
        "description": "Type: IBindCtx* A bind context that controls the parsing operation. This parameter is normally set to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE",
        "name": "*ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* The address of a pointer to a variable of type ITEMIDLIST that receives the item identifier list for the object. If an error occurs, then this parameter is set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "SFGAOF",
        "name": "sfgaoIn",
        "description": "Type: SFGAOF A ULONG value that specifies the attributes to query. To query for one or more attributes, initialize this parameter with the flags that represent the attributes of interest. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf."
      },
      {
        "in_out": "_Out_opt_",
        "type": "SFGAOF",
        "name": "*psfgaoOut",
        "description": "Type: SFGAOF* A pointer to a ULONG. On return, those attributes that are true for the object and were requested in sfgaoIn are set. An object's attribute flags can be zero or a combination of SFGAO flags. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available. ",
    "remarks": "The primary use of this function is for a program to check a path before using it and display the necessary user interface to prompt the user. For example, if the disk in drive A: were missing, a window that prompts the user to insert the disk would appear. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHPathPrepareForWrite",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to NULL, user interface windows are not created."
      },
      {
        "in_out": "_In_opt_",
        "type": "IUnknown",
        "name": "*punkEnableModless",
        "description": "Type: IUnknown* A pointer to an IUnknown interface that specifies the IOleInPlaceActiveObject object that implements the EnableModeless method."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that determine behavior options. This parameter can be a combination of the following values.  SHPPFW_NONE   Do not create new directories.  SHPPFW_DEFAULT   Default. Do not prompt the user if a directory needs to be created. This is identical to SHPPFW_DIRCREATE. Do not pass with SHPPFW_ASKDIRCREATE.  SHPPFW_DIRCREATE   Create directories without prompting the user. Do not pass with SHPPFW_ASKDIRCREATE.  SHPPFW_ASKDIRCREATE   Prompt the user before creating directories. Do not pass with SHPPFW_DIRCREATE.  SHPPFW_IGNOREFILENAME   Last item in pszPath is a file name, so ignore. For example, if pszPath=\"C:\\MyDir\\MyFile.doc\", only use \"C:\\MyDir\". If pszPath=\"C:\\MyFirDir\\MySecDir\", only use \"C:\\MyFirDir\".  SHPPFW_NOWRITECHECK   Not currently implemented.  SHPPFW_MEDIACHECKONLY   Windows XP or later. Suppresses the \"not accessible\" error message box, which displays when a failure other than a user cancellation occurs, and hwnd is not NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "With Windows 2000, if NULL is passed in the pszRootPath parameter, the function fails and returns an E_INVALIDARG error code. In earlier versions of the operating system, you can pass an empty string or NULL. If pszRootPath contains an empty string or NULL, information is retrieved for all Recycle Bins on all drives. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHQueryRecycleBin",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszRootPath",
        "description": "Type: LPCTSTR The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...)."
      },
      {
        "in_out": "_Inout_",
        "type": "LPSHQUERYRBINFO",
        "name": "pSHQueryRBInfo",
        "description": "Type: LPSHQUERYRBINFO The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The cbSize member of the structure must be set to the size of the structure before calling this API."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Checks the state of the computer for the current user to determine whether sending a notification is appropriate.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Applications should call SHQueryUserNotificationState and test the return value before displaying any notification UI that is similar to the balloon notifications generated by Shell_NotifyIcon. Notifications should only be displayed if this API returns QNS_ACCEPTS_NOTIFICATIONS. This informs the application whether the user is running processes that should not be interrupted. Top-level windows receive a WM_SETTINGCHANGE message when the user turns presentation settings on or off, and also when the user's session is locked or unlocked. Note that there are no notifications sent when the user starts or stops a full-screen application. If this function returns QUNS_QUIET_TIME, notifications should be displayed only if critical. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHQueryUserNotificationState",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "QUERY_USER_NOTIFICATION_STATE",
        "name": "*pquns",
        "description": "Type: QUERY_USER_NOTIFICATION_STATE* When this function returns, contains a pointer to one of the values of the QUERY_USER_NOTIFICATION_STATE enumeration."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the localized name of a file in a Shell folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "When a display name string is set by SHSetLocalizedName, Windows Explorer uses that string for display instead of the file name. The path to the file is unchanged. Applications can use the IShellFolder::GetDisplayNameOf method to get the display (localized) name through with the SIGDN_NORMALDISPLAY flag and the parsing (non-localized) name with SIGDN_DESKTOPABSOLUTEPARSING. Calling SHRemoveLocalizedName makes the display name identical to the parsing name. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHRemoveLocalizedName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Opens a Control Panel item.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if the Control Panel item was opened successfully; otherwise, FALSE. As of Windows Vista, this function always returns FALSE. ",
    "remarks": "If the specified Control Panel item is already running, SHRunControlPanel attempts to switch to that instance rather than opening a new instance. Example calls to SHRunControlPanel are shown here. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHRunControlPanel",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "lpcszCmdLine",
        "description": "Type: PCWSTR Pointer to a string that contains the command line that opens the Control Panel item. This command line includes at least the name of the .cpl file. It can also contain any other necessary information such as the property sheet page within the item (either by ordinal or by name). For more information, see Executing Control Panel Items."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndMsgParent",
        "description": "Type: HWND The handle of the parent window, used to display error messages about the opening of the item. This value can be NULL."
      }
    ],
    "min_client": "Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Applies the default set of properties on a Shell item.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The list of properties to set a default value comes from the SetDefaultsFor registry entry under the ProgID for the file association of the item. The list is prefixed by \"prop:\" and contains the canonical names of the properties to set the default value, for example, \"prop:System.Author;System.Document.DateCreated\". The possible properties for this list are System.Author, System.Document.DateCreated, and System.Photo.DateTaken. If the SetDefaultsFor entry does not exist on the ProgID, this function uses the default found on the SetDefaultsFor entry of HKEY_CLASSES_ROOT\\*. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetDefaultProperties",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the item's parent window, which receives error notifications. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "IShellItem",
        "name": "*psi",
        "description": "Type: IShellItem* A pointer to the IShellItem object that represents the item."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFileOpFlags",
        "description": "Type: DWORD Flags that customize the operation. See IFileOperation::SetOperationFlags for flag values."
      },
      {
        "in_out": "_In_opt_",
        "type": "IFileOperationProgressSink",
        "name": "*pfops",
        "description": "Type: IFileOperationProgressSink* A pointer to an IFileOperationProgressSink object used to follow the progress of the operation. See IFileOperation::Advise for details. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Windows Explorer and Internet Explorer can use SHSetInstanceExplorer to allow components such as Shell extensions to extend the lifetime of the process. Other applications can also use SHSetInstanceExplorer to allow for the same capability. For instance, the browser message loop and the proxy desktop use SHSetInstanceExplorer to let other threads extend their lifetime. Applications other than Windows Explorer and Internet Explorer that call this function might encounter compatibility problems because some components use SHGetInstanceExplorer to detect whether they are being hosted from within Windows Explorer or Internet Explorer. The interface pointer passed to SHSetInstanceExplorer must reference a free-threaded object. Each time a component calls SHGetInstanceExplorer, the system calls the AddRef method before returning the interface pointer to the calling component. The component then calls the IUnknown::Release method when processing is complete. The process that calls SHSetInstanceExplorer must not terminate while the reference count of the provided interface pointer is nonzero. For further information on how components use the process references, see SHGetInstanceExplorer. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHSetInstanceExplorer",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown",
        "name": "*punk",
        "description": "Type: IUnknown* A pointer to a free-threaded IUnknown. Components can use this interface (through SHGetInstanceExplorer) to prevent the host process from terminating. This value can be NULL, in which case the process reference is no longer made available to components."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Redirects a known folder to a new location.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This function replaces SHSetFolderPath. That older function is now simply a wrapper for SHSetKnownFolderPath. The caller of this function must have Administrator privileges. To call this function on public known folders, the caller must have Administrator privileges. For per-user known folders the caller only requires User privileges. Some of the known folders, for example, the Documents folder, are per-user. Every user has a different path for their Documents folder. If hToken is NULL, the API tries to access the calling application's instance of the folder, which is that of the current user. If hToken is a valid user token, the API tries to impersonate the user using this token and tries to access that user's instance. This function cannot be called on folders of type KF_CATEGORY_FIXED and KF_CATEGORY_VIRTUAL. To call this function on a folder of type KF_CATEGORY_COMMON, the calling application must be running with elevated privileges. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetKnownFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A GUID that identifies the known folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Either 0 or the following value.  KF_FLAG_DONT_UNEXPAND   If this flag is set, portions of the path referenced by pszPath may be represented by environment strings such as %USERPROFILE%."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents. \t\t\t             \t\t The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHSetKnownFolderPath to set folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to the folder's new path. This is a null-terminated Unicode string of length MAX_PATH. This path cannot be of zero length."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets the localized name of a file in a Shell folder.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "When this string is set, Explorer displays this string instead of the file name. The path to the file is unchanged. Applications can get the display (localized) name with IShellFolder::GetDisplayNameOf with the SIGDN_NORMALDISPLAY flag and the parsing (non-localized) name with IShellItem::GetDisplayName using the SIGDN_DESKTOPABSOLUTEPARSING flag. Calling SHRemoveLocalizedName makes the display name identical to the parsing name. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetLocalizedName",
    "is_callback": 0,
    "dll": "Shell32.dll;  Shell32.dll (version 5.6 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a string that specifies the fully qualified path of the target file."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszResModule",
        "description": "Type: PCWSTR A pointer to a string resource that specifies the localized version of the file name."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "idsRes",
        "description": "Type: int An integer ID that specifies the localized file name in the string resource."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets a temporary property for the specified item. A temporary property is kept in a read/write store that holds properties only for the lifetime of the IShellItem object, instead of writing them back into the item.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "A temporary value can only be read with SHGetTemporaryPropertyForItem or by passing GPS_TEMPORARY to IShellItem2::GetPropertyStore. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetTemporaryPropertyForItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem",
        "name": "*psi",
        "description": "Type: IShellItem* A pointer to the item on which the temporary property is to be set."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPERTYKEY",
        "name": "propkey",
        "description": "Type: REFPROPERTYKEY Reference to the PROPERTYKEY that identifies the temporary property that is being set."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a PROPVARIANT that contains the value of the temporary property."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Stores the current user's unread message count for a specified email account in the registry.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT HRESULT, which includes the following possible values.  ",
    "remarks": "When this function updates the registry, the new registry entry is automatically stamped with the current time and date. If this function is called by different independent software vendors (ISVs) that specify the same email name, only the last call is saved. That is, calls to this function overwrite any previously saved value for the same email address, even if the calls are made by different ISVs. It is recommended that the count of unread messages be set only for the main Inbox of the users account. Mail in sub-folders such as Drafts or Deleted Items should be ignored. It is important that email clients do not set the number of unread messages to 0 when the application exits, because this causes the number of unread messages to be erroneously reported as 0. Because this function uses HKEY_CURRENT_USER, it should not be called by a system process impersonating a user. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetUnreadMailCount",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.60 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMailAddress",
        "description": "Type: LPCTSTR A pointer to a string in Unicode that contains the current user's full email address."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCount",
        "description": "Type: DWORD The number of unread messages."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszShellExecuteCommand",
        "description": "Type: LPCTSTR A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by pszMailAddress."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE on success, FALSE on failure. ",
    "remarks": "This function wraps CheckTokenMembership and only checks local groups. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHTestTokenMembership",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE A handle to the token. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "ulRID",
        "description": "Type: ULONG The RID of the local group for which membership is tested."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CheckTokenMembership function determines whether a specified security identifier (SID) is enabled in an access token. If you want to determine group membership for app container tokens, you need to use the CheckTokenMembershipEx function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The CheckTokenMembership function simplifies the process of determining whether a SID is both present and enabled in an access token. Even if a SID is present in the token, the system may not use the SID in an access check. The SID may be disabled or have the SE_GROUP_USE_FOR_DENY_ONLY attribute. The system uses only enabled SIDs to grant access when performing an access check. For more information, see  SID Attributes in an Access Token. If TokenHandle is a restricted token, or if TokenHandle is NULL and the current effective token of the calling thread is a restricted token, CheckTokenMembership also checks whether the SID is present in the list of restricting SIDs. The following example shows checking a token for membership in the Administrators local group. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "CheckTokenMembership",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an impersonation token.     If TokenHandle is NULL, CheckTokenMembership uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's primary token to create an impersonation token."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "SidToCheck",
        "description": "A pointer to a  SID structure. The CheckTokenMembership function checks for the presence of this SID in the user and group SIDs of the access token."
      },
      {
        "in_out": "_Out_",
        "type": "PBOOL",
        "name": "IsMember",
        "description": "A pointer to a variable that receives the results of the check. If the SID is present and has the SE_GROUP_ENABLED attribute, IsMember returns TRUE; otherwise, it returns FALSE."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Notifies the Shell that an image in the system image list has changed.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "No return value. ",
    "remarks": "If you do not know the index in the system image list of the icon that you want to update, use SHGetFileInfo with the uFlags parameter set to SHGFI_SYSICONINDEX. You must use IExtractIcon::GetIconLocation with the parameters of the old icon that needs to be updated, not those of the new icon you want to replace it with. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHUpdateImage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.7 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszHashItem",
        "description": "Type: LPCTSTR A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the szIconFile parameter of IExtractIcon::GetIconLocation."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iIndex",
        "description": "Type: int An integer that specifies the zero-based index of the icon in the file specified by pszHashItem. Use the value that is pointed to by the piIndex parameter of IExtractIcon::GetIconLocation."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT An unsigned integer that specifies the flags that determine the icon attributes. Set uFlags to the value that is pointed to by the pwFlags parameter of IExtractIcon::GetIconLocation. The flags that are relevant to SHUpdateImage are GIL_NOTFILENAME and GIL_SIMULATEDOC."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iImageIndex",
        "description": "Type: int An integer that specifies the index in the system image list of the icon that is being updated."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Displays a standard message box that can be used to notify a user that an application has been updated.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: DWORD Returns one of the following values.  ",
    "remarks": "The preferred way to handle updates is to author a Channel Definition Format (CDF) with an Open Software Description (OSD) vocabulary and make the shortcut OSD-aware. Refer to the Channel Definition Format documentation for details. The SoftwareUpdateMessageBox function is intended to be used in the case where Shell shortcut hooks do not work. One example is an application that was not installed on the start menu. If that application needs to do its own software update check, it should use this function. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "SoftwareUpdateMessageBox",
    "is_callback": 0,
    "dll": "Shdocvw.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDistUnit",
        "description": "Type: PCWSTR The string value containing the identifier for the code distribution unit. For ActiveX controls, pszDistUnit is typically a GUID."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Must be set to zero."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPSOFTDISTINFO",
        "name": "psdi",
        "description": "Type: LPSOFTDISTINFO A pointer to a SOFTDISTINFO structure that, when this method returns successfully, receives the update information. The cbSize member must be initialized to the sizeof(SOFTDISTINFO)."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a unique name for a stream or storage object from a template.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is recommended that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "StgMakeUniqueName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStorage",
        "name": "*pstgParent",
        "description": "Type: IStorage* A pointer to an IStorage object."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszFileSpec",
        "description": "Type: PCWSTR The format or template for the name of the stream or storage object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD The access mode to use when opening the stream or storage object. For more information and descriptions of the possible values, see STGM Constants."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IStorage or IID_IStream."
      },
      {
        "in_out": "_Out_",
        "type": "void",
        "name": "**ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IStorage or IStream."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Finds the first occurrence of a substring within a string. The comparison is case-insensitive.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns the address of the first occurrence of the matching substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrStrNIW",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pszFirst",
        "description": "Type: PWSTR A pointer to the null-terminated, Unicode string that is being searched."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszSrch",
        "description": "Type: PCWSTR A pointer to the null-terminated, Unicode substring that is being searched for."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters from the beginning of the searched string in which to search for the substring."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Finds the first occurrence of a substring within a string. The comparison is case-sensitive.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns the address of the first occurrence of the matching substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrStrNW",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pszFirst",
        "description": "Type: PWSTR A pointer to the null-terminated, Unicode string that is being searched."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszSrch",
        "description": "Type: PCWSTR A pointer to the null-terminated, Unicode substring that is being searched for."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters from the beginning of the searched string in which to search for the substring."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Applies common translations to a given URL string, creating a new URL string.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: HRESULT Returns S_OK upon success, or S_FALSE if the URL did not require translation. If an error occurs, the function returns one of the following values.  ",
    "remarks": "This function does not validate the input URL string. A successful return value does not indicate that the URL strings are valid URLs. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "TranslateURL",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pcszURL",
        "description": "Type: PCTSTR The address of the URL string to be translated."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInFlags",
        "description": "Type: DWORD The bit flags that specify how the URL string is to be translated. This value can be a combination of the following:  TRANSLATEURL_FL_GUESS_PROTOCOL   If the protocol scheme is not specified in the pcszURL parameter to TranslateURL, the system automatically chooses a scheme and adds it to the URL.  TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL   If the protocol scheme is not specified in the pcszURL parameter to          \t\t\t\t\t\tTranslateURL, the system adds the default protocol to the URL."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "*ppszTranslatedURL",
        "description": "Type: PTSTR* A pointer variable that receives the pointer to the newly created, translated URL string, if any. The ppszTranslatedURL parameter is valid only if the function returns S_OK."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Unloads a user's profile that was loaded by the LoadUserProfile function. The caller must have administrative privileges on the computer. For more information, see the Remarks section of the LoadUserProfile function.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "Before calling UnloadUserProfile you should ensure that all handles to keys that you have opened in the user's registry hive are closed. If you do not close all open registry handles, the user's profile fails to unload. For more information, see  Registry Key Security and Access Rights and Registry Hives. For more information about calling functions that require administrator privileges, see Running with Special Privileges. ",
    "return_type": "BOOL WINAPI",
    "category": "Windows Shell",
    "name": "UnloadUserProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_IMPERSONATE and TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProfile",
        "description": "Type: HANDLE Handle to the registry key. This value is the hProfile member of the PROFILEINFO structure. For more information see the Remarks section of LoadUserProfile and Registry Key Security and Access Rights."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Cancels a change notification registered through RegisterAppStateChangeNotification.",
    "library": "Appnotify.lib",
    "min_server": "",
    "header": "Appnotify.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void NTAPI",
    "category": "Windows Shell",
    "name": "UnregisterAppStateChangeNotification",
    "is_callback": 0,
    "dll": "Twinapi.core.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PAPPSTATE_REGISTRATION",
        "name": "Registration",
        "description": "A pointer to the registration handle retrieved by RegisterAppStateChangeNotification through its Registration parameter."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "Invokes the unregistered URL protocol dialog box. This dialog box allows the user to select an application to associate with a previously unknown protocol.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: HRESULT In supported systems, returns S_OK if the application is registered with the URL protocol, or S_FALSE if nothing is registered. For example, the function returns S_FALSE when the user elects to perform a one-time execution via the selected application. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "URLAssociationDialog",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInFlags",
        "description": "Type: DWORD The bit flags that specify the behavior of the function. This value can be a combination of the following:  URLASSOCDLG_FL_USE_DEFAULT_NAME   Use the default file name (that is, \"Internet Shortcut\").  URLASSOCDLG_FL_REGISTER_ASSOC   Register the selected application as the handler for the protocol specified in pcszURL. The application is registered only if this flag is set and the user indicates that a persistent association is desired."
      },
      {
        "in_out": "",
        "type": "PTCSTR",
        "name": "pcszFile",
        "description": "Type: PTCSTR The address of a constant zero-terminated string that contains the file name to associate with the URLs protocol."
      },
      {
        "in_out": "",
        "type": "PTCSTR",
        "name": "pcszURL",
        "description": "Type: PTCSTR The address of a constant zero-terminated string that contains the URL with an unknown protocol."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszAppBuf",
        "description": "Type: PTSTR The address of a buffer that receives the path of the application specified by the user."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "ucAppBufLen",
        "description": "Type: UINT The size of pszAppBuf, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is no longer implemented.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Windows Shell",
    "name": "WinExecError",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND Handle to the window that ran the WinExec function."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "error",
        "description": "Type: int Value of type int that specifies the error."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpstrFileName",
        "description": "Type: LPCTSTR Pointer to a string that contains the name of the file where the error occurred."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpstrTitle",
        "description": "Type: LPCTSTR Pointer to a string that contains the title of the file where the error occurred."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "Before closing the window that requested help, the application must call WinHelp with the uCommand parameter set to HELP_QUIT. Until all applications have done this, Windows Help will not terminate. Note that calling Windows Help with the HELP_QUIT command is not necessary if you used the HELP_CONTEXTPOPUP command to start Windows Help. This function fails if called from any context but the current user. The following table shows the possible values for the uCommand parameter and the corresponding formats of the dwData parameter.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "WinHelp",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWndMain",
        "description": "Type: HWND A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help."
      },
      {
        "in_out": "",
        "type": "LPCTSTR",
        "name": "lpszHelp",
        "description": "Type: LPCTSTR The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to display. \t     \t\t\t\t The file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uCommand",
        "description": "Type: UINT The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section."
      },
      {
        "in_out": "",
        "type": "ULONG_PTR",
        "name": "dwData",
        "description": "Type: ULONG_PTR Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  }
]

